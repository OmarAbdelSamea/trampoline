#ifndef GENERATED_ASN1SCC_ITS_H
#define GENERATED_ASN1SCC_ITS_H
/*
	Code automatically generated by asn1scc tool
	Edited by Sayed Badr:
	1- Commenting all externed variables.
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"
#include "asn1crt_encoding_uper.h"

#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint V2xFac_StationIDType;


void V2xFac_StationIDType_Initialize(V2xFac_StationIDType* pVal);

#define ERR_V2XFAC_STATIONIDTYPE		36  /**/
flag V2xFac_StationIDType_IsConstraintValid(const V2xFac_StationIDType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STATIONIDTYPE		37  /**/
#define V2xFac_StationIDType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_StationIDType_REQUIRED_BITS_FOR_ENCODING        32

flag V2xFac_StationIDType_Encode(const V2xFac_StationIDType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STATIONIDTYPE		38  /**/
flag V2xFac_StationIDType_Decode(V2xFac_StationIDType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_ItsPduHeaderType --------------------------------------------*/
typedef asn1SccUint V2xFac_ItsPduHeaderType_protocolVersion;

typedef asn1SccUint V2xFac_ItsPduHeaderType_messageId;

typedef struct {
    V2xFac_ItsPduHeaderType_protocolVersion protocolVersion;
    V2xFac_ItsPduHeaderType_messageId messageId;
    V2xFac_StationIDType stationId;

} V2xFac_ItsPduHeaderType;

void V2xFac_ItsPduHeaderType_protocolVersion_Initialize(V2xFac_ItsPduHeaderType_protocolVersion* pVal);
void V2xFac_ItsPduHeaderType_messageId_Initialize(V2xFac_ItsPduHeaderType_messageId* pVal);
void V2xFac_ItsPduHeaderType_Initialize(V2xFac_ItsPduHeaderType* pVal);

#define ERR_V2XFAC_ITSPDUHEADERTYPE		29  /**/
#define ERR_V2XFAC_ITSPDUHEADERTYPE_PROTOCOLVERSION		1  /**/
#define ERR_V2XFAC_ITSPDUHEADERTYPE_MESSAGEID		8  /**/
#define ERR_V2XFAC_ITSPDUHEADERTYPE_STATIONID_2		22  /**/
flag V2xFac_ItsPduHeaderType_IsConstraintValid(const V2xFac_ItsPduHeaderType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ITSPDUHEADERTYPE		30  /**/
#define ERR_UPER_ENCODE_V2XFAC_ITSPDUHEADERTYPE_PROTOCOLVERSION		2  /**/
#define ERR_UPER_ENCODE_V2XFAC_ITSPDUHEADERTYPE_MESSAGEID		9  /**/
#define ERR_UPER_ENCODE_V2XFAC_ITSPDUHEADERTYPE_STATIONID_2		23  /**/
#define V2xFac_ItsPduHeaderType_REQUIRED_BYTES_FOR_ENCODING       6 
#define V2xFac_ItsPduHeaderType_REQUIRED_BITS_FOR_ENCODING        48

flag V2xFac_ItsPduHeaderType_Encode(const V2xFac_ItsPduHeaderType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ITSPDUHEADERTYPE		31  /**/
#define ERR_UPER_DECODE_V2XFAC_ITSPDUHEADERTYPE_PROTOCOLVERSION		3  /**/
#define ERR_UPER_DECODE_V2XFAC_ITSPDUHEADERTYPE_MESSAGEID		10  /**/
#define ERR_UPER_DECODE_V2XFAC_ITSPDUHEADERTYPE_STATIONID_2		24  /**/
flag V2xFac_ItsPduHeaderType_Decode(V2xFac_ItsPduHeaderType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_LongitudeType;


void V2xFac_LongitudeType_Initialize(V2xFac_LongitudeType* pVal);

#define ERR_V2XFAC_LONGITUDETYPE		225  /**/
flag V2xFac_LongitudeType_IsConstraintValid(const V2xFac_LongitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LONGITUDETYPE		226  /**/
#define V2xFac_LongitudeType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_LongitudeType_REQUIRED_BITS_FOR_ENCODING        32

flag V2xFac_LongitudeType_Encode(const V2xFac_LongitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LONGITUDETYPE		227  /**/
flag V2xFac_LongitudeType_Decode(V2xFac_LongitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_LatitudeType;


void V2xFac_LatitudeType_Initialize(V2xFac_LatitudeType* pVal);

#define ERR_V2XFAC_LATITUDETYPE		232  /**/
flag V2xFac_LatitudeType_IsConstraintValid(const V2xFac_LatitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LATITUDETYPE		233  /**/
#define V2xFac_LatitudeType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_LatitudeType_REQUIRED_BITS_FOR_ENCODING        31

flag V2xFac_LatitudeType_Encode(const V2xFac_LatitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LATITUDETYPE		234  /**/
flag V2xFac_LatitudeType_Decode(V2xFac_LatitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_AltitudeValueType;


void V2xFac_AltitudeValueType_Initialize(V2xFac_AltitudeValueType* pVal);

#define ERR_V2XFAC_ALTITUDEVALUETYPE		274  /**/
flag V2xFac_AltitudeValueType_IsConstraintValid(const V2xFac_AltitudeValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ALTITUDEVALUETYPE		275  /**/
#define V2xFac_AltitudeValueType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_AltitudeValueType_REQUIRED_BITS_FOR_ENCODING        20

flag V2xFac_AltitudeValueType_Encode(const V2xFac_AltitudeValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ALTITUDEVALUETYPE		276  /**/
flag V2xFac_AltitudeValueType_Decode(V2xFac_AltitudeValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_01 = 0,
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_02 = 1,
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_05 = 2,
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_10 = 3,
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_20 = 4,
    v2XFAC_ALTITUDECONFIDENCE_ALT_000_50 = 5,
    v2XFAC_ALTITUDECONFIDENCE_ALT_001_00 = 6,
    v2XFAC_ALTITUDECONFIDENCE_ALT_002_00 = 7,
    v2XFAC_ALTITUDECONFIDENCE_ALT_005_00 = 8,
    v2XFAC_ALTITUDECONFIDENCE_ALT_010_00 = 9,
    v2XFAC_ALTITUDECONFIDENCE_ALT_020_00 = 10,
    v2XFAC_ALTITUDECONFIDENCE_ALT_050_00 = 11,
    v2XFAC_ALTITUDECONFIDENCE_ALT_100_00 = 12,
    v2XFAC_ALTITUDECONFIDENCE_ALT_200_00 = 13,
    v2XFAC_ALTITUDECONFIDENCE_ALT_OUTOFRANGE = 14,
    v2XFAC_ALTITUDECONFIDENCE_ALT_UNAVAILABLE = 15
} V2xFac_AltitudeConfidenceType;

// please use the following macros to avoid breaking code.
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_01 v2XFAC_ALTITUDECONFIDENCE_ALT_000_01
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_02 v2XFAC_ALTITUDECONFIDENCE_ALT_000_02
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_05 v2XFAC_ALTITUDECONFIDENCE_ALT_000_05
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_10 v2XFAC_ALTITUDECONFIDENCE_ALT_000_10
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_20 v2XFAC_ALTITUDECONFIDENCE_ALT_000_20
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_000_50 v2XFAC_ALTITUDECONFIDENCE_ALT_000_50
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_001_00 v2XFAC_ALTITUDECONFIDENCE_ALT_001_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_002_00 v2XFAC_ALTITUDECONFIDENCE_ALT_002_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_005_00 v2XFAC_ALTITUDECONFIDENCE_ALT_005_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_010_00 v2XFAC_ALTITUDECONFIDENCE_ALT_010_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_020_00 v2XFAC_ALTITUDECONFIDENCE_ALT_020_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_050_00 v2XFAC_ALTITUDECONFIDENCE_ALT_050_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_100_00 v2XFAC_ALTITUDECONFIDENCE_ALT_100_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_200_00 v2XFAC_ALTITUDECONFIDENCE_ALT_200_00
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_OUTOFRANGE v2XFAC_ALTITUDECONFIDENCE_ALT_OUTOFRANGE
#define V2xFac_AltitudeConfidenceType_v2XFAC_ALTITUDECONFIDENCE_ALT_UNAVAILABLE v2XFAC_ALTITUDECONFIDENCE_ALT_UNAVAILABLE

void V2xFac_AltitudeConfidenceType_Initialize(V2xFac_AltitudeConfidenceType* pVal);

#define ERR_V2XFAC_ALTITUDECONFIDENCETYPE		281  /**/
flag V2xFac_AltitudeConfidenceType_IsConstraintValid(const V2xFac_AltitudeConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ALTITUDECONFIDENCETYPE		282  /**/
#define V2xFac_AltitudeConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AltitudeConfidenceType_REQUIRED_BITS_FOR_ENCODING        4

flag V2xFac_AltitudeConfidenceType_Encode(const V2xFac_AltitudeConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ALTITUDECONFIDENCETYPE		283  /**/
flag V2xFac_AltitudeConfidenceType_Decode(V2xFac_AltitudeConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_AltitudeType --------------------------------------------*/
typedef struct {
    V2xFac_AltitudeValueType altitudeValue;
    V2xFac_AltitudeConfidenceType altitudeConfidence;

} V2xFac_AltitudeType;

void V2xFac_AltitudeType_Initialize(V2xFac_AltitudeType* pVal);

#define ERR_V2XFAC_ALTITUDETYPE		267  /**/
#define ERR_V2XFAC_ALTITUDETYPE_ALTITUDEVALUE_2		246  /**/
#define ERR_V2XFAC_ALTITUDETYPE_ALTITUDECONFIDENCE_2		260  /**/
flag V2xFac_AltitudeType_IsConstraintValid(const V2xFac_AltitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ALTITUDETYPE		268  /**/
#define ERR_UPER_ENCODE_V2XFAC_ALTITUDETYPE_ALTITUDEVALUE_2		247  /**/
#define ERR_UPER_ENCODE_V2XFAC_ALTITUDETYPE_ALTITUDECONFIDENCE_2		261  /**/
#define V2xFac_AltitudeType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_AltitudeType_REQUIRED_BITS_FOR_ENCODING        24

flag V2xFac_AltitudeType_Encode(const V2xFac_AltitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ALTITUDETYPE		269  /**/
#define ERR_UPER_DECODE_V2XFAC_ALTITUDETYPE_ALTITUDEVALUE_2		248  /**/
#define ERR_UPER_DECODE_V2XFAC_ALTITUDETYPE_ALTITUDECONFIDENCE_2		262  /**/
flag V2xFac_AltitudeType_Decode(V2xFac_AltitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_DeltaLongitudeType;


void V2xFac_DeltaLongitudeType_Initialize(V2xFac_DeltaLongitudeType* pVal);

#define ERR_V2XFAC_DELTALONGITUDETYPE		288  /**/
flag V2xFac_DeltaLongitudeType_IsConstraintValid(const V2xFac_DeltaLongitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DELTALONGITUDETYPE		289  /**/
#define V2xFac_DeltaLongitudeType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_DeltaLongitudeType_REQUIRED_BITS_FOR_ENCODING        18

flag V2xFac_DeltaLongitudeType_Encode(const V2xFac_DeltaLongitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DELTALONGITUDETYPE		290  /**/
flag V2xFac_DeltaLongitudeType_Decode(V2xFac_DeltaLongitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_DeltaLatitudeType;


void V2xFac_DeltaLatitudeType_Initialize(V2xFac_DeltaLatitudeType* pVal);

#define ERR_V2XFAC_DELTALATITUDETYPE		295  /**/
flag V2xFac_DeltaLatitudeType_IsConstraintValid(const V2xFac_DeltaLatitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DELTALATITUDETYPE		296  /**/
#define V2xFac_DeltaLatitudeType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_DeltaLatitudeType_REQUIRED_BITS_FOR_ENCODING        18

flag V2xFac_DeltaLatitudeType_Encode(const V2xFac_DeltaLatitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DELTALATITUDETYPE		297  /**/
flag V2xFac_DeltaLatitudeType_Decode(V2xFac_DeltaLatitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_DeltaAltitudeType;


void V2xFac_DeltaAltitudeType_Initialize(V2xFac_DeltaAltitudeType* pVal);

#define ERR_V2XFAC_DELTAALTITUDETYPE		302  /**/
flag V2xFac_DeltaAltitudeType_IsConstraintValid(const V2xFac_DeltaAltitudeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DELTAALTITUDETYPE		303  /**/
#define V2xFac_DeltaAltitudeType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_DeltaAltitudeType_REQUIRED_BITS_FOR_ENCODING        15

flag V2xFac_DeltaAltitudeType_Encode(const V2xFac_DeltaAltitudeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DELTAALTITUDETYPE		304  /**/
flag V2xFac_DeltaAltitudeType_Decode(V2xFac_DeltaAltitudeType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_DeltaReferencePositionType --------------------------------------------*/
typedef struct {
    V2xFac_DeltaLatitudeType deltaLatitude;
    V2xFac_DeltaLongitudeType deltaLongitude;
    V2xFac_DeltaAltitudeType deltaAltitude;

} V2xFac_DeltaReferencePositionType;

void V2xFac_DeltaReferencePositionType_Initialize(V2xFac_DeltaReferencePositionType* pVal);

#define ERR_V2XFAC_DELTAREFERENCEPOSITIONTYPE		218  /**/
#define ERR_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALATITUDE_2		183  /**/
#define ERR_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALONGITUDE_2		197  /**/
#define ERR_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTAALTITUDE_2		211  /**/
flag V2xFac_DeltaReferencePositionType_IsConstraintValid(const V2xFac_DeltaReferencePositionType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE		219  /**/
#define ERR_UPER_ENCODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALATITUDE_2		184  /**/
#define ERR_UPER_ENCODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALONGITUDE_2		198  /**/
#define ERR_UPER_ENCODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTAALTITUDE_2		212  /**/
#define V2xFac_DeltaReferencePositionType_REQUIRED_BYTES_FOR_ENCODING       7 
#define V2xFac_DeltaReferencePositionType_REQUIRED_BITS_FOR_ENCODING        51

flag V2xFac_DeltaReferencePositionType_Encode(const V2xFac_DeltaReferencePositionType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE		220  /**/
#define ERR_UPER_DECODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALATITUDE_2		185  /**/
#define ERR_UPER_DECODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTALONGITUDE_2		199  /**/
#define ERR_UPER_DECODE_V2XFAC_DELTAREFERENCEPOSITIONTYPE_DELTAALTITUDE_2		213  /**/
flag V2xFac_DeltaReferencePositionType_Decode(V2xFac_DeltaReferencePositionType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PathDeltaTimeType;


void V2xFac_PathDeltaTimeType_Initialize(V2xFac_PathDeltaTimeType* pVal);

#define ERR_V2XFAC_PATHDELTATIMETYPE		435  /**/
flag V2xFac_PathDeltaTimeType_IsConstraintValid(const V2xFac_PathDeltaTimeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PATHDELTATIMETYPE		436  /**/
#define V2xFac_PathDeltaTimeType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_PathDeltaTimeType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_PathDeltaTimeType_Encode(const V2xFac_PathDeltaTimeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PATHDELTATIMETYPE		437  /**/
flag V2xFac_PathDeltaTimeType_Decode(V2xFac_PathDeltaTimeType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_PathPointType --------------------------------------------*/
typedef struct {
    V2xFac_DeltaReferencePositionType pathPosition;
    V2xFac_PathDeltaTimeType pathDeltaTime;

    struct {
        unsigned int pathDeltaTime:1;
    } exist;

} V2xFac_PathPointType;

void V2xFac_PathPointType_Initialize(V2xFac_PathPointType* pVal);

#define ERR_V2XFAC_PATHPOINTTYPE		428  /**/
#define ERR_V2XFAC_PATHPOINTTYPE_PATHPOSITION_2		407  /**/
#define ERR_V2XFAC_PATHPOINTTYPE_PATHDELTATIME_2		421  /**/
flag V2xFac_PathPointType_IsConstraintValid(const V2xFac_PathPointType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PATHPOINTTYPE		429  /**/
#define ERR_UPER_ENCODE_V2XFAC_PATHPOINTTYPE_PATHPOSITION_2		408  /**/
#define ERR_UPER_ENCODE_V2XFAC_PATHPOINTTYPE_PATHDELTATIME_2		422  /**/
#define V2xFac_PathPointType_REQUIRED_BYTES_FOR_ENCODING       9 
#define V2xFac_PathPointType_REQUIRED_BITS_FOR_ENCODING        68

flag V2xFac_PathPointType_Encode(const V2xFac_PathPointType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PATHPOINTTYPE		430  /**/
#define ERR_UPER_DECODE_V2XFAC_PATHPOINTTYPE_PATHPOSITION_2		409  /**/
#define ERR_UPER_DECODE_V2XFAC_PATHPOINTTYPE_PATHDELTATIME_2		423  /**/
flag V2xFac_PathPointType_Decode(V2xFac_PathPointType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_PathPointType arr[40];
} V2xFac_PathHistoryType;

void V2xFac_PathHistoryType_Initialize(V2xFac_PathHistoryType* pVal);

#define ERR_V2XFAC_PATHHISTORYTYPE		1492  /**/
#define ERR_V2XFAC_PATHHISTORYTYPE_ELM_2		1485  /**/
flag V2xFac_PathHistoryType_IsConstraintValid(const V2xFac_PathHistoryType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PATHHISTORYTYPE		1493  /**/
#define ERR_UPER_ENCODE_V2XFAC_PATHHISTORYTYPE_ELM_2		1486  /**/
#define V2xFac_PathHistoryType_REQUIRED_BYTES_FOR_ENCODING       341 
#define V2xFac_PathHistoryType_REQUIRED_BITS_FOR_ENCODING        2726

flag V2xFac_PathHistoryType_Encode(const V2xFac_PathHistoryType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PATHHISTORYTYPE		1494  /**/
#define ERR_UPER_DECODE_V2XFAC_PATHHISTORYTYPE_ELM_2		1487  /**/
flag V2xFac_PathHistoryType_Decode(V2xFac_PathHistoryType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_PathHistoryType arr[7];
} V2xFac_TracesType;

void V2xFac_TracesType_Initialize(V2xFac_TracesType* pVal);

#define ERR_V2XFAC_TRACESTYPE		2038  /**/
#define ERR_V2XFAC_TRACESTYPE_ELM_2		2031  /**/
flag V2xFac_TracesType_IsConstraintValid(const V2xFac_TracesType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TRACESTYPE		2039  /**/
#define ERR_UPER_ENCODE_V2XFAC_TRACESTYPE_ELM_2		2032  /**/
#define V2xFac_TracesType_REQUIRED_BYTES_FOR_ENCODING       2386 
#define V2xFac_TracesType_REQUIRED_BITS_FOR_ENCODING        19085

flag V2xFac_TracesType_Encode(const V2xFac_TracesType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TRACESTYPE		2040  /**/
#define ERR_UPER_DECODE_V2XFAC_TRACESTYPE_ELM_2		2033  /**/
flag V2xFac_TracesType_Decode(V2xFac_TracesType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PtActivationTypeType;


void V2xFac_PtActivationTypeType_Initialize(V2xFac_PtActivationTypeType* pVal);

#define ERR_V2XFAC_PTACTIVATIONTYPETYPE		477  /**/
flag V2xFac_PtActivationTypeType_IsConstraintValid(const V2xFac_PtActivationTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PTACTIVATIONTYPETYPE		478  /**/
#define V2xFac_PtActivationTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PtActivationTypeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_PtActivationTypeType_Encode(const V2xFac_PtActivationTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PTACTIVATIONTYPETYPE		479  /**/
flag V2xFac_PtActivationTypeType_Decode(V2xFac_PtActivationTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[20];
} V2xFac_PtActivationDataType;


void V2xFac_PtActivationDataType_Initialize(V2xFac_PtActivationDataType* pVal);

#define ERR_V2XFAC_PTACTIVATIONDATATYPE		484  /**/
flag V2xFac_PtActivationDataType_IsConstraintValid(const V2xFac_PtActivationDataType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PTACTIVATIONDATATYPE		485  /**/
#define V2xFac_PtActivationDataType_REQUIRED_BYTES_FOR_ENCODING       21 
#define V2xFac_PtActivationDataType_REQUIRED_BITS_FOR_ENCODING        165

flag V2xFac_PtActivationDataType_Encode(const V2xFac_PtActivationDataType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PTACTIVATIONDATATYPE		486  /**/
flag V2xFac_PtActivationDataType_Decode(V2xFac_PtActivationDataType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_PtActivationType --------------------------------------------*/
typedef struct {
    V2xFac_PtActivationTypeType ptActivationType;
    V2xFac_PtActivationDataType ptActivationData;

} V2xFac_PtActivationType;

void V2xFac_PtActivationType_Initialize(V2xFac_PtActivationType* pVal);

#define ERR_V2XFAC_PTACTIVATIONTYPE		470  /**/
#define ERR_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONTYPE_2		449  /**/
#define ERR_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONDATA_2		463  /**/
flag V2xFac_PtActivationType_IsConstraintValid(const V2xFac_PtActivationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PTACTIVATIONTYPE		471  /**/
#define ERR_UPER_ENCODE_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONTYPE_2		450  /**/
#define ERR_UPER_ENCODE_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONDATA_2		464  /**/
#define V2xFac_PtActivationType_REQUIRED_BYTES_FOR_ENCODING       22 
#define V2xFac_PtActivationType_REQUIRED_BITS_FOR_ENCODING        173

flag V2xFac_PtActivationType_Encode(const V2xFac_PtActivationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PTACTIVATIONTYPE		472  /**/
#define ERR_UPER_DECODE_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONTYPE_2		451  /**/
#define ERR_UPER_DECODE_V2XFAC_PTACTIVATIONTYPE_PTACTIVATIONDATA_2		465  /**/
flag V2xFac_PtActivationType_Decode(V2xFac_PtActivationType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_AccelerationControlType_BRAKEPEDALENGAGED 0x1  /*(1 << 0)*/
#define V2xFac_AccelerationControlType_GASPEDALENGAGED 0x2  /*(1 << 1)*/
#define V2xFac_AccelerationControlType_EMERGENCYBRAKEENGAGED 0x4  /*(1 << 2)*/
#define V2xFac_AccelerationControlType_COLLISIONWARNINGENGAGED 0x8  /*(1 << 3)*/
#define V2xFac_AccelerationControlType_ACCENGAGED 0x10  /*(1 << 4)*/
#define V2xFac_AccelerationControlType_CRUISECONTROLENGAGED 0x20  /*(1 << 5)*/
#define V2xFac_AccelerationControlType_SPEEDLIMITERENGAGED 0x40  /*(1 << 6)*/

typedef struct {
    
    byte arr[1];
} V2xFac_AccelerationControlType;

void V2xFac_AccelerationControlType_Initialize(V2xFac_AccelerationControlType* pVal);

#define ERR_V2XFAC_ACCELERATIONCONTROLTYPE		491  /**/
flag V2xFac_AccelerationControlType_IsConstraintValid(const V2xFac_AccelerationControlType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ACCELERATIONCONTROLTYPE		492  /**/
#define V2xFac_AccelerationControlType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AccelerationControlType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_AccelerationControlType_Encode(const V2xFac_AccelerationControlType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ACCELERATIONCONTROLTYPE		493  /**/
flag V2xFac_AccelerationControlType_Decode(V2xFac_AccelerationControlType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SemiAxisLengthType;


void V2xFac_SemiAxisLengthType_Initialize(V2xFac_SemiAxisLengthType* pVal);

#define ERR_V2XFAC_SEMIAXISLENGTHTYPE		498  /**/
flag V2xFac_SemiAxisLengthType_IsConstraintValid(const V2xFac_SemiAxisLengthType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SEMIAXISLENGTHTYPE		499  /**/
#define V2xFac_SemiAxisLengthType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_SemiAxisLengthType_REQUIRED_BITS_FOR_ENCODING        12

flag V2xFac_SemiAxisLengthType_Encode(const V2xFac_SemiAxisLengthType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SEMIAXISLENGTHTYPE		500  /**/
flag V2xFac_SemiAxisLengthType_Decode(V2xFac_SemiAxisLengthType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_CauseCodeTypeType;


void V2xFac_CauseCodeTypeType_Initialize(V2xFac_CauseCodeTypeType* pVal);

#define ERR_V2XFAC_CAUSECODETYPETYPE		540  /**/
flag V2xFac_CauseCodeTypeType_IsConstraintValid(const V2xFac_CauseCodeTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CAUSECODETYPETYPE		541  /**/
#define V2xFac_CauseCodeTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_CauseCodeTypeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_CauseCodeTypeType_Encode(const V2xFac_CauseCodeTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CAUSECODETYPETYPE		542  /**/
flag V2xFac_CauseCodeTypeType_Decode(V2xFac_CauseCodeTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SubCauseCodeTypeType;


void V2xFac_SubCauseCodeTypeType_Initialize(V2xFac_SubCauseCodeTypeType* pVal);

#define ERR_V2XFAC_SUBCAUSECODETYPETYPE		547  /**/
flag V2xFac_SubCauseCodeTypeType_IsConstraintValid(const V2xFac_SubCauseCodeTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SUBCAUSECODETYPETYPE		548  /**/
#define V2xFac_SubCauseCodeTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SubCauseCodeTypeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_SubCauseCodeTypeType_Encode(const V2xFac_SubCauseCodeTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SUBCAUSECODETYPETYPE		549  /**/
flag V2xFac_SubCauseCodeTypeType_Decode(V2xFac_SubCauseCodeTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_CauseCodeType --------------------------------------------*/
typedef struct {
    V2xFac_CauseCodeTypeType causeCode;
    V2xFac_SubCauseCodeTypeType subCauseCode;

} V2xFac_CauseCodeType;

void V2xFac_CauseCodeType_Initialize(V2xFac_CauseCodeType* pVal);

#define ERR_V2XFAC_CAUSECODETYPE		533  /**/
#define ERR_V2XFAC_CAUSECODETYPE_CAUSECODE_2		512  /**/
#define ERR_V2XFAC_CAUSECODETYPE_SUBCAUSECODE_2		526  /**/
flag V2xFac_CauseCodeType_IsConstraintValid(const V2xFac_CauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CAUSECODETYPE		534  /**/
#define ERR_UPER_ENCODE_V2XFAC_CAUSECODETYPE_CAUSECODE_2		513  /**/
#define ERR_UPER_ENCODE_V2XFAC_CAUSECODETYPE_SUBCAUSECODE_2		527  /**/
#define V2xFac_CauseCodeType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_CauseCodeType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_CauseCodeType_Encode(const V2xFac_CauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CAUSECODETYPE		535  /**/
#define ERR_UPER_DECODE_V2XFAC_CAUSECODETYPE_CAUSECODE_2		514  /**/
#define ERR_UPER_DECODE_V2XFAC_CAUSECODETYPE_SUBCAUSECODE_2		528  /**/
flag V2xFac_CauseCodeType_Decode(V2xFac_CauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_TrafficConditionSubCauseCodeType;


void V2xFac_TrafficConditionSubCauseCodeType_Initialize(V2xFac_TrafficConditionSubCauseCodeType* pVal);

#define ERR_V2XFAC_TRAFFICCONDITIONSUBCAUSECODETYPE		554  /**/
flag V2xFac_TrafficConditionSubCauseCodeType_IsConstraintValid(const V2xFac_TrafficConditionSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TRAFFICCONDITIONSUBCAUSECODETYPE		555  /**/
#define V2xFac_TrafficConditionSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_TrafficConditionSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_TrafficConditionSubCauseCodeType_Encode(const V2xFac_TrafficConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TRAFFICCONDITIONSUBCAUSECODETYPE		556  /**/
flag V2xFac_TrafficConditionSubCauseCodeType_Decode(V2xFac_TrafficConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AccidentSubCauseCodeType;


void V2xFac_AccidentSubCauseCodeType_Initialize(V2xFac_AccidentSubCauseCodeType* pVal);

#define ERR_V2XFAC_ACCIDENTSUBCAUSECODETYPE		561  /**/
flag V2xFac_AccidentSubCauseCodeType_IsConstraintValid(const V2xFac_AccidentSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ACCIDENTSUBCAUSECODETYPE		562  /**/
#define V2xFac_AccidentSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AccidentSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_AccidentSubCauseCodeType_Encode(const V2xFac_AccidentSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ACCIDENTSUBCAUSECODETYPE		563  /**/
flag V2xFac_AccidentSubCauseCodeType_Decode(V2xFac_AccidentSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_RoadworksSubCauseCodeType;


void V2xFac_RoadworksSubCauseCodeType_Initialize(V2xFac_RoadworksSubCauseCodeType* pVal);

#define ERR_V2XFAC_ROADWORKSSUBCAUSECODETYPE		568  /**/
flag V2xFac_RoadworksSubCauseCodeType_IsConstraintValid(const V2xFac_RoadworksSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ROADWORKSSUBCAUSECODETYPE		569  /**/
#define V2xFac_RoadworksSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RoadworksSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_RoadworksSubCauseCodeType_Encode(const V2xFac_RoadworksSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ROADWORKSSUBCAUSECODETYPE		570  /**/
flag V2xFac_RoadworksSubCauseCodeType_Decode(V2xFac_RoadworksSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HumanPresenceOnTheRoadSubCauseCodeType;


void V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_Initialize(V2xFac_HumanPresenceOnTheRoadSubCauseCodeType* pVal);

#define ERR_V2XFAC_HUMANPRESENCEONTHEROADSUBCAUSECODETYPE		575  /**/
flag V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_IsConstraintValid(const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HUMANPRESENCEONTHEROADSUBCAUSECODETYPE		576  /**/
#define V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_Encode(const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HUMANPRESENCEONTHEROADSUBCAUSECODETYPE		577  /**/
flag V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_Decode(V2xFac_HumanPresenceOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_WrongWayDrivingSubCauseCodeType;


void V2xFac_WrongWayDrivingSubCauseCodeType_Initialize(V2xFac_WrongWayDrivingSubCauseCodeType* pVal);

#define ERR_V2XFAC_WRONGWAYDRIVINGSUBCAUSECODETYPE		582  /**/
flag V2xFac_WrongWayDrivingSubCauseCodeType_IsConstraintValid(const V2xFac_WrongWayDrivingSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_WRONGWAYDRIVINGSUBCAUSECODETYPE		583  /**/
#define V2xFac_WrongWayDrivingSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_WrongWayDrivingSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_WrongWayDrivingSubCauseCodeType_Encode(const V2xFac_WrongWayDrivingSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_WRONGWAYDRIVINGSUBCAUSECODETYPE		584  /**/
flag V2xFac_WrongWayDrivingSubCauseCodeType_Decode(V2xFac_WrongWayDrivingSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType;


void V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_Initialize(V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType* pVal);

#define ERR_V2XFAC_ADVERSEWEATHERCONDITION_EXTREMEWEATHERCONDITIONSUBCAUSECODETYPE		589  /**/
flag V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_IsConstraintValid(const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ADVERSEWEATHERCONDITION_EXTREMEWEATHERCONDITIONSUBCAUSECODETYPE		590  /**/
#define V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_Encode(const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ADVERSEWEATHERCONDITION_EXTREMEWEATHERCONDITIONSUBCAUSECODETYPE		591  /**/
flag V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_Decode(V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType;


void V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_Initialize(V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType* pVal);

#define ERR_V2XFAC_ADVERSEWEATHERCONDITION_ADHESIONSUBCAUSECODETYPE		596  /**/
flag V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_IsConstraintValid(const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ADVERSEWEATHERCONDITION_ADHESIONSUBCAUSECODETYPE		597  /**/
#define V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_Encode(const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ADVERSEWEATHERCONDITION_ADHESIONSUBCAUSECODETYPE		598  /**/
flag V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_Decode(V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType;


void V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_Initialize(V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType* pVal);

#define ERR_V2XFAC_ADVERSEWEATHERCONDITION_VISIBILITYSUBCAUSECODETYPE		603  /**/
flag V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_IsConstraintValid(const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ADVERSEWEATHERCONDITION_VISIBILITYSUBCAUSECODETYPE		604  /**/
#define V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_Encode(const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ADVERSEWEATHERCONDITION_VISIBILITYSUBCAUSECODETYPE		605  /**/
flag V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_Decode(V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType;


void V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_Initialize(V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType* pVal);

#define ERR_V2XFAC_ADVERSEWEATHERCONDITION_PRECIPITATIONSUBCAUSECODETYPE		610  /**/
flag V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_IsConstraintValid(const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ADVERSEWEATHERCONDITION_PRECIPITATIONSUBCAUSECODETYPE		611  /**/
#define V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_Encode(const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ADVERSEWEATHERCONDITION_PRECIPITATIONSUBCAUSECODETYPE		612  /**/
flag V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_Decode(V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SlowVehicleSubCauseCodeType;


void V2xFac_SlowVehicleSubCauseCodeType_Initialize(V2xFac_SlowVehicleSubCauseCodeType* pVal);

#define ERR_V2XFAC_SLOWVEHICLESUBCAUSECODETYPE		617  /**/
flag V2xFac_SlowVehicleSubCauseCodeType_IsConstraintValid(const V2xFac_SlowVehicleSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SLOWVEHICLESUBCAUSECODETYPE		618  /**/
#define V2xFac_SlowVehicleSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SlowVehicleSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_SlowVehicleSubCauseCodeType_Encode(const V2xFac_SlowVehicleSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SLOWVEHICLESUBCAUSECODETYPE		619  /**/
flag V2xFac_SlowVehicleSubCauseCodeType_Decode(V2xFac_SlowVehicleSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_StationaryVehicleSubCauseCodeType;


void V2xFac_StationaryVehicleSubCauseCodeType_Initialize(V2xFac_StationaryVehicleSubCauseCodeType* pVal);

#define ERR_V2XFAC_STATIONARYVEHICLESUBCAUSECODETYPE		624  /**/
flag V2xFac_StationaryVehicleSubCauseCodeType_IsConstraintValid(const V2xFac_StationaryVehicleSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STATIONARYVEHICLESUBCAUSECODETYPE		625  /**/
#define V2xFac_StationaryVehicleSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_StationaryVehicleSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_StationaryVehicleSubCauseCodeType_Encode(const V2xFac_StationaryVehicleSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STATIONARYVEHICLESUBCAUSECODETYPE		626  /**/
flag V2xFac_StationaryVehicleSubCauseCodeType_Decode(V2xFac_StationaryVehicleSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HumanProblemSubCauseCodeType;


void V2xFac_HumanProblemSubCauseCodeType_Initialize(V2xFac_HumanProblemSubCauseCodeType* pVal);

#define ERR_V2XFAC_HUMANPROBLEMSUBCAUSECODETYPE		631  /**/
flag V2xFac_HumanProblemSubCauseCodeType_IsConstraintValid(const V2xFac_HumanProblemSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HUMANPROBLEMSUBCAUSECODETYPE		632  /**/
#define V2xFac_HumanProblemSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HumanProblemSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HumanProblemSubCauseCodeType_Encode(const V2xFac_HumanProblemSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HUMANPROBLEMSUBCAUSECODETYPE		633  /**/
flag V2xFac_HumanProblemSubCauseCodeType_Decode(V2xFac_HumanProblemSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_EmergencyVehicleApproachingSubCauseCodeType;


void V2xFac_EmergencyVehicleApproachingSubCauseCodeType_Initialize(V2xFac_EmergencyVehicleApproachingSubCauseCodeType* pVal);

#define ERR_V2XFAC_EMERGENCYVEHICLEAPPROACHINGSUBCAUSECODETYPE		638  /**/
flag V2xFac_EmergencyVehicleApproachingSubCauseCodeType_IsConstraintValid(const V2xFac_EmergencyVehicleApproachingSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EMERGENCYVEHICLEAPPROACHINGSUBCAUSECODETYPE		639  /**/
#define V2xFac_EmergencyVehicleApproachingSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_EmergencyVehicleApproachingSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_EmergencyVehicleApproachingSubCauseCodeType_Encode(const V2xFac_EmergencyVehicleApproachingSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EMERGENCYVEHICLEAPPROACHINGSUBCAUSECODETYPE		640  /**/
flag V2xFac_EmergencyVehicleApproachingSubCauseCodeType_Decode(V2xFac_EmergencyVehicleApproachingSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType;


void V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_Initialize(V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType* pVal);

#define ERR_V2XFAC_HAZARDOUSLOCATION_DANGEROUSCURVESUBCAUSECODETYPE		645  /**/
flag V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_IsConstraintValid(const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HAZARDOUSLOCATION_DANGEROUSCURVESUBCAUSECODETYPE		646  /**/
#define V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_Encode(const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HAZARDOUSLOCATION_DANGEROUSCURVESUBCAUSECODETYPE		647  /**/
flag V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_Decode(V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType;


void V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_Initialize(V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType* pVal);

#define ERR_V2XFAC_HAZARDOUSLOCATION_SURFACECONDITIONSUBCAUSECODETYPE		652  /**/
flag V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_IsConstraintValid(const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HAZARDOUSLOCATION_SURFACECONDITIONSUBCAUSECODETYPE		653  /**/
#define V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_Encode(const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HAZARDOUSLOCATION_SURFACECONDITIONSUBCAUSECODETYPE		654  /**/
flag V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_Decode(V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType;


void V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_Initialize(V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType* pVal);

#define ERR_V2XFAC_HAZARDOUSLOCATION_OBSTACLEONTHEROADSUBCAUSECODETYPE		659  /**/
flag V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_IsConstraintValid(const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HAZARDOUSLOCATION_OBSTACLEONTHEROADSUBCAUSECODETYPE		660  /**/
#define V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_Encode(const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HAZARDOUSLOCATION_OBSTACLEONTHEROADSUBCAUSECODETYPE		661  /**/
flag V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_Decode(V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType;


void V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_Initialize(V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType* pVal);

#define ERR_V2XFAC_HAZARDOUSLOCATION_ANIMALONTHEROADSUBCAUSECODETYPE		666  /**/
flag V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_IsConstraintValid(const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HAZARDOUSLOCATION_ANIMALONTHEROADSUBCAUSECODETYPE		667  /**/
#define V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_Encode(const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HAZARDOUSLOCATION_ANIMALONTHEROADSUBCAUSECODETYPE		668  /**/
flag V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_Decode(V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_CollisionRiskSubCauseCodeType;


void V2xFac_CollisionRiskSubCauseCodeType_Initialize(V2xFac_CollisionRiskSubCauseCodeType* pVal);

#define ERR_V2XFAC_COLLISIONRISKSUBCAUSECODETYPE		673  /**/
flag V2xFac_CollisionRiskSubCauseCodeType_IsConstraintValid(const V2xFac_CollisionRiskSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_COLLISIONRISKSUBCAUSECODETYPE		674  /**/
#define V2xFac_CollisionRiskSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_CollisionRiskSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_CollisionRiskSubCauseCodeType_Encode(const V2xFac_CollisionRiskSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_COLLISIONRISKSUBCAUSECODETYPE		675  /**/
flag V2xFac_CollisionRiskSubCauseCodeType_Decode(V2xFac_CollisionRiskSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SignalViolationSubCauseCodeType;


void V2xFac_SignalViolationSubCauseCodeType_Initialize(V2xFac_SignalViolationSubCauseCodeType* pVal);

#define ERR_V2XFAC_SIGNALVIOLATIONSUBCAUSECODETYPE		680  /**/
flag V2xFac_SignalViolationSubCauseCodeType_IsConstraintValid(const V2xFac_SignalViolationSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SIGNALVIOLATIONSUBCAUSECODETYPE		681  /**/
#define V2xFac_SignalViolationSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SignalViolationSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_SignalViolationSubCauseCodeType_Encode(const V2xFac_SignalViolationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SIGNALVIOLATIONSUBCAUSECODETYPE		682  /**/
flag V2xFac_SignalViolationSubCauseCodeType_Decode(V2xFac_SignalViolationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType;


void V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_Initialize(V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType* pVal);

#define ERR_V2XFAC_RESCUEANDRECOVERYWORKINPROGRESSSUBCAUSECODETYPE		687  /**/
flag V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_IsConstraintValid(const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_RESCUEANDRECOVERYWORKINPROGRESSSUBCAUSECODETYPE		688  /**/
#define V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_Encode(const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_RESCUEANDRECOVERYWORKINPROGRESSSUBCAUSECODETYPE		689  /**/
flag V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_Decode(V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_DangerousEndOfQueueSubCauseCodeType;


void V2xFac_DangerousEndOfQueueSubCauseCodeType_Initialize(V2xFac_DangerousEndOfQueueSubCauseCodeType* pVal);

#define ERR_V2XFAC_DANGEROUSENDOFQUEUESUBCAUSECODETYPE		694  /**/
flag V2xFac_DangerousEndOfQueueSubCauseCodeType_IsConstraintValid(const V2xFac_DangerousEndOfQueueSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSENDOFQUEUESUBCAUSECODETYPE		695  /**/
#define V2xFac_DangerousEndOfQueueSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_DangerousEndOfQueueSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_DangerousEndOfQueueSubCauseCodeType_Encode(const V2xFac_DangerousEndOfQueueSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DANGEROUSENDOFQUEUESUBCAUSECODETYPE		696  /**/
flag V2xFac_DangerousEndOfQueueSubCauseCodeType_Decode(V2xFac_DangerousEndOfQueueSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_DangerousSituationSubCauseCodeType;


void V2xFac_DangerousSituationSubCauseCodeType_Initialize(V2xFac_DangerousSituationSubCauseCodeType* pVal);

#define ERR_V2XFAC_DANGEROUSSITUATIONSUBCAUSECODETYPE		701  /**/
flag V2xFac_DangerousSituationSubCauseCodeType_IsConstraintValid(const V2xFac_DangerousSituationSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSSITUATIONSUBCAUSECODETYPE		702  /**/
#define V2xFac_DangerousSituationSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_DangerousSituationSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_DangerousSituationSubCauseCodeType_Encode(const V2xFac_DangerousSituationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DANGEROUSSITUATIONSUBCAUSECODETYPE		703  /**/
flag V2xFac_DangerousSituationSubCauseCodeType_Decode(V2xFac_DangerousSituationSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_VehicleBreakdownSubCauseCodeType;


void V2xFac_VehicleBreakdownSubCauseCodeType_Initialize(V2xFac_VehicleBreakdownSubCauseCodeType* pVal);

#define ERR_V2XFAC_VEHICLEBREAKDOWNSUBCAUSECODETYPE		708  /**/
flag V2xFac_VehicleBreakdownSubCauseCodeType_IsConstraintValid(const V2xFac_VehicleBreakdownSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLEBREAKDOWNSUBCAUSECODETYPE		709  /**/
#define V2xFac_VehicleBreakdownSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_VehicleBreakdownSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_VehicleBreakdownSubCauseCodeType_Encode(const V2xFac_VehicleBreakdownSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLEBREAKDOWNSUBCAUSECODETYPE		710  /**/
flag V2xFac_VehicleBreakdownSubCauseCodeType_Decode(V2xFac_VehicleBreakdownSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PostCrashSubCauseCodeType;


void V2xFac_PostCrashSubCauseCodeType_Initialize(V2xFac_PostCrashSubCauseCodeType* pVal);

#define ERR_V2XFAC_POSTCRASHSUBCAUSECODETYPE		715  /**/
flag V2xFac_PostCrashSubCauseCodeType_IsConstraintValid(const V2xFac_PostCrashSubCauseCodeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSTCRASHSUBCAUSECODETYPE		716  /**/
#define V2xFac_PostCrashSubCauseCodeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PostCrashSubCauseCodeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_PostCrashSubCauseCodeType_Encode(const V2xFac_PostCrashSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSTCRASHSUBCAUSECODETYPE		717  /**/
flag V2xFac_PostCrashSubCauseCodeType_Decode(V2xFac_PostCrashSubCauseCodeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_CurvatureValueType;


void V2xFac_CurvatureValueType_Initialize(V2xFac_CurvatureValueType* pVal);

#define ERR_V2XFAC_CURVATUREVALUETYPE		757  /**/
flag V2xFac_CurvatureValueType_IsConstraintValid(const V2xFac_CurvatureValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CURVATUREVALUETYPE		758  /**/
#define V2xFac_CurvatureValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_CurvatureValueType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_CurvatureValueType_Encode(const V2xFac_CurvatureValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CURVATUREVALUETYPE		759  /**/
flag V2xFac_CurvatureValueType_Decode(V2xFac_CurvatureValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_00002 = 0,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0001 = 1,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0005 = 2,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_002 = 3,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_01 = 4,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_1 = 5,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_OUT_OF_RANGE = 6,
    v2XFAC_CURVATURE_CONFIDENCE_TYPE_UNAVAILABLE = 7
} V2xFac_CurvatureConfidenceType;

// please use the following macros to avoid breaking code.
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_00002 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_00002
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0001 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0001
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0005 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_0005
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_002 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_002
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_01 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_01
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_1 v2XFAC_CURVATURE_CONFIDENCE_TYPE_ONE_PER_METER_0_1
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_OUT_OF_RANGE v2XFAC_CURVATURE_CONFIDENCE_TYPE_OUT_OF_RANGE
#define V2xFac_CurvatureConfidenceType_v2XFAC_CURVATURE_CONFIDENCE_TYPE_UNAVAILABLE v2XFAC_CURVATURE_CONFIDENCE_TYPE_UNAVAILABLE

void V2xFac_CurvatureConfidenceType_Initialize(V2xFac_CurvatureConfidenceType* pVal);

#define ERR_V2XFAC_CURVATURECONFIDENCETYPE		764  /**/
flag V2xFac_CurvatureConfidenceType_IsConstraintValid(const V2xFac_CurvatureConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CURVATURECONFIDENCETYPE		765  /**/
#define V2xFac_CurvatureConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_CurvatureConfidenceType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_CurvatureConfidenceType_Encode(const V2xFac_CurvatureConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CURVATURECONFIDENCETYPE		766  /**/
flag V2xFac_CurvatureConfidenceType_Decode(V2xFac_CurvatureConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_CurvatureType --------------------------------------------*/
typedef struct {
    V2xFac_CurvatureValueType curvatureValue;
    V2xFac_CurvatureConfidenceType curvatureConfidence;

} V2xFac_CurvatureType;

void V2xFac_CurvatureType_Initialize(V2xFac_CurvatureType* pVal);

#define ERR_V2XFAC_CURVATURETYPE		750  /**/
#define ERR_V2XFAC_CURVATURETYPE_CURVATUREVALUE_2		729  /**/
#define ERR_V2XFAC_CURVATURETYPE_CURVATURECONFIDENCE_2		743  /**/
flag V2xFac_CurvatureType_IsConstraintValid(const V2xFac_CurvatureType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CURVATURETYPE		751  /**/
#define ERR_UPER_ENCODE_V2XFAC_CURVATURETYPE_CURVATUREVALUE_2		730  /**/
#define ERR_UPER_ENCODE_V2XFAC_CURVATURETYPE_CURVATURECONFIDENCE_2		744  /**/
#define V2xFac_CurvatureType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_CurvatureType_REQUIRED_BITS_FOR_ENCODING        19

flag V2xFac_CurvatureType_Encode(const V2xFac_CurvatureType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CURVATURETYPE		752  /**/
#define ERR_UPER_DECODE_V2XFAC_CURVATURETYPE_CURVATUREVALUE_2		731  /**/
#define ERR_UPER_DECODE_V2XFAC_CURVATURETYPE_CURVATURECONFIDENCE_2		745  /**/
flag V2xFac_CurvatureType_Decode(V2xFac_CurvatureType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_USED = 0,
    v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_NOT_USED = 1,
    v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_UNAVAILABLE = 2
} V2xFac_CurvatureCalculationModeType;

// please use the following macros to avoid breaking code.
#define V2xFac_CurvatureCalculationModeType_v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_USED v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_USED
#define V2xFac_CurvatureCalculationModeType_v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_NOT_USED v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_YAWRATE_NOT_USED
#define V2xFac_CurvatureCalculationModeType_v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_UNAVAILABLE v2XFAC_CURVATURE_CALCULATION_MODE_TYPE_UNAVAILABLE

void V2xFac_CurvatureCalculationModeType_Initialize(V2xFac_CurvatureCalculationModeType* pVal);

#define ERR_V2XFAC_CURVATURECALCULATIONMODETYPE		771  /**/
flag V2xFac_CurvatureCalculationModeType_IsConstraintValid(const V2xFac_CurvatureCalculationModeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CURVATURECALCULATIONMODETYPE		772  /**/
#define V2xFac_CurvatureCalculationModeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_CurvatureCalculationModeType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_CurvatureCalculationModeType_Encode(const V2xFac_CurvatureCalculationModeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CURVATURECALCULATIONMODETYPE		773  /**/
flag V2xFac_CurvatureCalculationModeType_Decode(V2xFac_CurvatureCalculationModeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HeadingValueType;


void V2xFac_HeadingValueType_Initialize(V2xFac_HeadingValueType* pVal);

#define ERR_V2XFAC_HEADINGVALUETYPE		813  /**/
flag V2xFac_HeadingValueType_IsConstraintValid(const V2xFac_HeadingValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HEADINGVALUETYPE		814  /**/
#define V2xFac_HeadingValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_HeadingValueType_REQUIRED_BITS_FOR_ENCODING        12

flag V2xFac_HeadingValueType_Encode(const V2xFac_HeadingValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HEADINGVALUETYPE		815  /**/
flag V2xFac_HeadingValueType_Decode(V2xFac_HeadingValueType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_PosConfidenceEllipseType --------------------------------------------*/
typedef struct {
    V2xFac_SemiAxisLengthType semiMajorConfidence;
    V2xFac_SemiAxisLengthType semiMinorConfidence;
    V2xFac_HeadingValueType semiMajorOrientation;

} V2xFac_PosConfidenceEllipseType;

void V2xFac_PosConfidenceEllipseType_Initialize(V2xFac_PosConfidenceEllipseType* pVal);

#define ERR_V2XFAC_POSCONFIDENCEELLIPSETYPE		351  /**/
#define ERR_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORCONFIDENCE_2		316  /**/
#define ERR_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMINORCONFIDENCE_2		330  /**/
#define ERR_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORORIENTATION_2		344  /**/
flag V2xFac_PosConfidenceEllipseType_IsConstraintValid(const V2xFac_PosConfidenceEllipseType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSCONFIDENCEELLIPSETYPE		352  /**/
#define ERR_UPER_ENCODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORCONFIDENCE_2		317  /**/
#define ERR_UPER_ENCODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMINORCONFIDENCE_2		331  /**/
#define ERR_UPER_ENCODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORORIENTATION_2		345  /**/
#define V2xFac_PosConfidenceEllipseType_REQUIRED_BYTES_FOR_ENCODING       5 
#define V2xFac_PosConfidenceEllipseType_REQUIRED_BITS_FOR_ENCODING        36

flag V2xFac_PosConfidenceEllipseType_Encode(const V2xFac_PosConfidenceEllipseType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSCONFIDENCEELLIPSETYPE		353  /**/
#define ERR_UPER_DECODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORCONFIDENCE_2		318  /**/
#define ERR_UPER_DECODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMINORCONFIDENCE_2		332  /**/
#define ERR_UPER_DECODE_V2XFAC_POSCONFIDENCEELLIPSETYPE_SEMIMAJORORIENTATION_2		346  /**/
flag V2xFac_PosConfidenceEllipseType_Decode(V2xFac_PosConfidenceEllipseType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_ReferencePositionType --------------------------------------------*/
typedef struct {
    V2xFac_LatitudeType latitude;
    V2xFac_LongitudeType longitude;
    V2xFac_PosConfidenceEllipseType posConfidenceEllipse;
    V2xFac_AltitudeType altitude;

} V2xFac_ReferencePositionType;

void V2xFac_ReferencePositionType_Initialize(V2xFac_ReferencePositionType* pVal);

#define ERR_V2XFAC_REFERENCEPOSITIONTYPE		169  /**/
#define ERR_V2XFAC_REFERENCEPOSITIONTYPE_LATITUDE_2		50  /**/
#define ERR_V2XFAC_REFERENCEPOSITIONTYPE_LONGITUDE_2		64  /**/
#define ERR_V2XFAC_REFERENCEPOSITIONTYPE_POSCONFIDENCEELLIPSE_2		120  /**/
#define ERR_V2XFAC_REFERENCEPOSITIONTYPE_ALTITUDE_2		162  /**/
flag V2xFac_ReferencePositionType_IsConstraintValid(const V2xFac_ReferencePositionType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_REFERENCEPOSITIONTYPE		170  /**/
#define ERR_UPER_ENCODE_V2XFAC_REFERENCEPOSITIONTYPE_LATITUDE_2		51  /**/
#define ERR_UPER_ENCODE_V2XFAC_REFERENCEPOSITIONTYPE_LONGITUDE_2		65  /**/
#define ERR_UPER_ENCODE_V2XFAC_REFERENCEPOSITIONTYPE_POSCONFIDENCEELLIPSE_2		121  /**/
#define ERR_UPER_ENCODE_V2XFAC_REFERENCEPOSITIONTYPE_ALTITUDE_2		163  /**/
#define V2xFac_ReferencePositionType_REQUIRED_BYTES_FOR_ENCODING       16 
#define V2xFac_ReferencePositionType_REQUIRED_BITS_FOR_ENCODING        123

flag V2xFac_ReferencePositionType_Encode(const V2xFac_ReferencePositionType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_REFERENCEPOSITIONTYPE		171  /**/
#define ERR_UPER_DECODE_V2XFAC_REFERENCEPOSITIONTYPE_LATITUDE_2		52  /**/
#define ERR_UPER_DECODE_V2XFAC_REFERENCEPOSITIONTYPE_LONGITUDE_2		66  /**/
#define ERR_UPER_DECODE_V2XFAC_REFERENCEPOSITIONTYPE_POSCONFIDENCEELLIPSE_2		122  /**/
#define ERR_UPER_DECODE_V2XFAC_REFERENCEPOSITIONTYPE_ALTITUDE_2		164  /**/
flag V2xFac_ReferencePositionType_Decode(V2xFac_ReferencePositionType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_ReferencePositionType arr[40];
} V2xFac_ItineraryPathType;

void V2xFac_ItineraryPathType_Initialize(V2xFac_ItineraryPathType* pVal);

#define ERR_V2XFAC_ITINERARYPATHTYPE		1842  /**/
#define ERR_V2XFAC_ITINERARYPATHTYPE_ELM_2		1835  /**/
flag V2xFac_ItineraryPathType_IsConstraintValid(const V2xFac_ItineraryPathType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ITINERARYPATHTYPE		1843  /**/
#define ERR_UPER_ENCODE_V2XFAC_ITINERARYPATHTYPE_ELM_2		1836  /**/
#define V2xFac_ItineraryPathType_REQUIRED_BYTES_FOR_ENCODING       616 
#define V2xFac_ItineraryPathType_REQUIRED_BITS_FOR_ENCODING        4926

flag V2xFac_ItineraryPathType_Encode(const V2xFac_ItineraryPathType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ITINERARYPATHTYPE		1844  /**/
#define ERR_UPER_DECODE_V2XFAC_ITINERARYPATHTYPE_ELM_2		1837  /**/
flag V2xFac_ItineraryPathType_Decode(V2xFac_ItineraryPathType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_HeadingConfidenceType;


void V2xFac_HeadingConfidenceType_Initialize(V2xFac_HeadingConfidenceType* pVal);

#define ERR_V2XFAC_HEADINGCONFIDENCETYPE		820  /**/
flag V2xFac_HeadingConfidenceType_IsConstraintValid(const V2xFac_HeadingConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HEADINGCONFIDENCETYPE		821  /**/
#define V2xFac_HeadingConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HeadingConfidenceType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_HeadingConfidenceType_Encode(const V2xFac_HeadingConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HEADINGCONFIDENCETYPE		822  /**/
flag V2xFac_HeadingConfidenceType_Decode(V2xFac_HeadingConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_HeadingType --------------------------------------------*/
typedef struct {
    V2xFac_HeadingValueType headingValue;
    V2xFac_HeadingConfidenceType headingConfidence;

} V2xFac_HeadingType;

void V2xFac_HeadingType_Initialize(V2xFac_HeadingType* pVal);

#define ERR_V2XFAC_HEADINGTYPE		806  /**/
#define ERR_V2XFAC_HEADINGTYPE_HEADINGVALUE_2		785  /**/
#define ERR_V2XFAC_HEADINGTYPE_HEADINGCONFIDENCE_2		799  /**/
flag V2xFac_HeadingType_IsConstraintValid(const V2xFac_HeadingType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HEADINGTYPE		807  /**/
#define ERR_UPER_ENCODE_V2XFAC_HEADINGTYPE_HEADINGVALUE_2		786  /**/
#define ERR_UPER_ENCODE_V2XFAC_HEADINGTYPE_HEADINGCONFIDENCE_2		800  /**/
#define V2xFac_HeadingType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_HeadingType_REQUIRED_BITS_FOR_ENCODING        19

flag V2xFac_HeadingType_Encode(const V2xFac_HeadingType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HEADINGTYPE		808  /**/
#define ERR_UPER_DECODE_V2XFAC_HEADINGTYPE_HEADINGVALUE_2		787  /**/
#define ERR_UPER_DECODE_V2XFAC_HEADINGTYPE_HEADINGCONFIDENCE_2		801  /**/
flag V2xFac_HeadingType_Decode(V2xFac_HeadingType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_LanePositionType;


void V2xFac_LanePositionType_Initialize(V2xFac_LanePositionType* pVal);

#define ERR_V2XFAC_LANEPOSITIONTYPE		827  /**/
flag V2xFac_LanePositionType_IsConstraintValid(const V2xFac_LanePositionType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LANEPOSITIONTYPE		828  /**/
#define V2xFac_LanePositionType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_LanePositionType_REQUIRED_BITS_FOR_ENCODING        4

flag V2xFac_LanePositionType_Encode(const V2xFac_LanePositionType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LANEPOSITIONTYPE		829  /**/
flag V2xFac_LanePositionType_Decode(V2xFac_LanePositionType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_STOPPING = 0,
    v2XFAC_HARD_SHOULDER_STATUS_TYPE_CLOSED = 1,
    v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_DRIVING = 2
} V2xFac_HardShoulderStatusType;

// please use the following macros to avoid breaking code.
#define V2xFac_HardShoulderStatusType_v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_STOPPING v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_STOPPING
#define V2xFac_HardShoulderStatusType_v2XFAC_HARD_SHOULDER_STATUS_TYPE_CLOSED v2XFAC_HARD_SHOULDER_STATUS_TYPE_CLOSED
#define V2xFac_HardShoulderStatusType_v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_DRIVING v2XFAC_HARD_SHOULDER_STATUS_TYPE_AVAILABLE_FOR_DRIVING

void V2xFac_HardShoulderStatusType_Initialize(V2xFac_HardShoulderStatusType* pVal);

#define ERR_V2XFAC_HARDSHOULDERSTATUSTYPE		869  /**/
flag V2xFac_HardShoulderStatusType_IsConstraintValid(const V2xFac_HardShoulderStatusType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HARDSHOULDERSTATUSTYPE		870  /**/
#define V2xFac_HardShoulderStatusType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HardShoulderStatusType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_HardShoulderStatusType_Encode(const V2xFac_HardShoulderStatusType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HARDSHOULDERSTATUSTYPE		871  /**/
flag V2xFac_HardShoulderStatusType_Decode(V2xFac_HardShoulderStatusType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_DrivingLaneStatusType_OUTERMOSTLANECLOSED 0x2  /*(1 << 1)*/
#define V2xFac_DrivingLaneStatusType_SECONDLANEFROMOUTSIDECLOSED 0x4  /*(1 << 2)*/

typedef struct {
    int nCount; /*Number of bits in the array. Max value is : 14 */
    
    byte arr[2];
} V2xFac_DrivingLaneStatusType;

void V2xFac_DrivingLaneStatusType_Initialize(V2xFac_DrivingLaneStatusType* pVal);

#define ERR_V2XFAC_DRIVINGLANESTATUSTYPE		876  /**/
flag V2xFac_DrivingLaneStatusType_IsConstraintValid(const V2xFac_DrivingLaneStatusType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DRIVINGLANESTATUSTYPE		877  /**/
#define V2xFac_DrivingLaneStatusType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_DrivingLaneStatusType_REQUIRED_BITS_FOR_ENCODING        18

flag V2xFac_DrivingLaneStatusType_Encode(const V2xFac_DrivingLaneStatusType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DRIVINGLANESTATUSTYPE		878  /**/
flag V2xFac_DrivingLaneStatusType_Decode(V2xFac_DrivingLaneStatusType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_ClosedLanesType --------------------------------------------*/
typedef struct {
    V2xFac_HardShoulderStatusType hardShoulderStatus;
    V2xFac_DrivingLaneStatusType drivingLaneStatus;

    struct {
        unsigned int hardShoulderStatus:1;
    } exist;

} V2xFac_ClosedLanesType;

void V2xFac_ClosedLanesType_Initialize(V2xFac_ClosedLanesType* pVal);

#define ERR_V2XFAC_CLOSEDLANESTYPE		862  /**/
#define ERR_V2XFAC_CLOSEDLANESTYPE_HARDSHOULDERSTATUS_2		841  /**/
#define ERR_V2XFAC_CLOSEDLANESTYPE_DRIVINGLANESTATUS_2		855  /**/
flag V2xFac_ClosedLanesType_IsConstraintValid(const V2xFac_ClosedLanesType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CLOSEDLANESTYPE		863  /**/
#define ERR_UPER_ENCODE_V2XFAC_CLOSEDLANESTYPE_HARDSHOULDERSTATUS_2		842  /**/
#define ERR_UPER_ENCODE_V2XFAC_CLOSEDLANESTYPE_DRIVINGLANESTATUS_2		856  /**/
#define V2xFac_ClosedLanesType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_ClosedLanesType_REQUIRED_BITS_FOR_ENCODING        21

flag V2xFac_ClosedLanesType_Encode(const V2xFac_ClosedLanesType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CLOSEDLANESTYPE		864  /**/
#define ERR_UPER_DECODE_V2XFAC_CLOSEDLANESTYPE_HARDSHOULDERSTATUS_2		843  /**/
#define ERR_UPER_DECODE_V2XFAC_CLOSEDLANESTYPE_DRIVINGLANESTATUS_2		857  /**/
flag V2xFac_ClosedLanesType_Decode(V2xFac_ClosedLanesType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PerformanceClassType;


void V2xFac_PerformanceClassType_Initialize(V2xFac_PerformanceClassType* pVal);

#define ERR_V2XFAC_PERFORMANCECLASSTYPE		883  /**/
flag V2xFac_PerformanceClassType_IsConstraintValid(const V2xFac_PerformanceClassType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PERFORMANCECLASSTYPE		884  /**/
#define V2xFac_PerformanceClassType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PerformanceClassType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_PerformanceClassType_Encode(const V2xFac_PerformanceClassType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PERFORMANCECLASSTYPE		885  /**/
flag V2xFac_PerformanceClassType_Decode(V2xFac_PerformanceClassType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SpeedValueType;


void V2xFac_SpeedValueType_Initialize(V2xFac_SpeedValueType* pVal);

#define ERR_V2XFAC_SPEEDVALUETYPE		890  /**/
flag V2xFac_SpeedValueType_IsConstraintValid(const V2xFac_SpeedValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SPEEDVALUETYPE		891  /**/
#define V2xFac_SpeedValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_SpeedValueType_REQUIRED_BITS_FOR_ENCODING        14

flag V2xFac_SpeedValueType_Encode(const V2xFac_SpeedValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SPEEDVALUETYPE		892  /**/
flag V2xFac_SpeedValueType_Decode(V2xFac_SpeedValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SpeedConfidenceType;


void V2xFac_SpeedConfidenceType_Initialize(V2xFac_SpeedConfidenceType* pVal);

#define ERR_V2XFAC_SPEEDCONFIDENCETYPE		897  /**/
flag V2xFac_SpeedConfidenceType_IsConstraintValid(const V2xFac_SpeedConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SPEEDCONFIDENCETYPE		898  /**/
#define V2xFac_SpeedConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SpeedConfidenceType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_SpeedConfidenceType_Encode(const V2xFac_SpeedConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SPEEDCONFIDENCETYPE		899  /**/
flag V2xFac_SpeedConfidenceType_Decode(V2xFac_SpeedConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_SpeedType --------------------------------------------*/
typedef struct {
    V2xFac_SpeedValueType speedValue;
    V2xFac_SpeedConfidenceType speedConfidence;

} V2xFac_SpeedType;

void V2xFac_SpeedType_Initialize(V2xFac_SpeedType* pVal);

#define ERR_V2XFAC_SPEEDTYPE		939  /**/
#define ERR_V2XFAC_SPEEDTYPE_SPEEDVALUE_2		918  /**/
#define ERR_V2XFAC_SPEEDTYPE_SPEEDCONFIDENCE_2		932  /**/
flag V2xFac_SpeedType_IsConstraintValid(const V2xFac_SpeedType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SPEEDTYPE		940  /**/
#define ERR_UPER_ENCODE_V2XFAC_SPEEDTYPE_SPEEDVALUE_2		919  /**/
#define ERR_UPER_ENCODE_V2XFAC_SPEEDTYPE_SPEEDCONFIDENCE_2		933  /**/
#define V2xFac_SpeedType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_SpeedType_REQUIRED_BITS_FOR_ENCODING        21

flag V2xFac_SpeedType_Encode(const V2xFac_SpeedType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SPEEDTYPE		941  /**/
#define ERR_UPER_DECODE_V2XFAC_SPEEDTYPE_SPEEDVALUE_2		920  /**/
#define ERR_UPER_DECODE_V2XFAC_SPEEDTYPE_SPEEDCONFIDENCE_2		934  /**/
flag V2xFac_SpeedType_Decode(V2xFac_SpeedType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_VehicleMassType;


void V2xFac_VehicleMassType_Initialize(V2xFac_VehicleMassType* pVal);

#define ERR_V2XFAC_VEHICLEMASSTYPE		904  /**/
flag V2xFac_VehicleMassType_IsConstraintValid(const V2xFac_VehicleMassType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLEMASSTYPE		905  /**/
#define V2xFac_VehicleMassType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_VehicleMassType_REQUIRED_BITS_FOR_ENCODING        10

flag V2xFac_VehicleMassType_Encode(const V2xFac_VehicleMassType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLEMASSTYPE		906  /**/
flag V2xFac_VehicleMassType_Decode(V2xFac_VehicleMassType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_DRIVE_DIRECTION_TYPE_FORWARD = 0,
    v2XFAC_DRIVE_DIRECTION_TYPE_BACKWARD = 1,
    v2XFAC_DRIVE_DIRECTION_TYPE_UNAVAILABLE = 2
} V2xFac_DriveDirectionType;

// please use the following macros to avoid breaking code.
#define V2xFac_DriveDirectionType_v2XFAC_DRIVE_DIRECTION_TYPE_FORWARD v2XFAC_DRIVE_DIRECTION_TYPE_FORWARD
#define V2xFac_DriveDirectionType_v2XFAC_DRIVE_DIRECTION_TYPE_BACKWARD v2XFAC_DRIVE_DIRECTION_TYPE_BACKWARD
#define V2xFac_DriveDirectionType_v2XFAC_DRIVE_DIRECTION_TYPE_UNAVAILABLE v2XFAC_DRIVE_DIRECTION_TYPE_UNAVAILABLE

void V2xFac_DriveDirectionType_Initialize(V2xFac_DriveDirectionType* pVal);

#define ERR_V2XFAC_DRIVEDIRECTIONTYPE		946  /**/
flag V2xFac_DriveDirectionType_IsConstraintValid(const V2xFac_DriveDirectionType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DRIVEDIRECTIONTYPE		947  /**/
#define V2xFac_DriveDirectionType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_DriveDirectionType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_DriveDirectionType_Encode(const V2xFac_DriveDirectionType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DRIVEDIRECTIONTYPE		948  /**/
flag V2xFac_DriveDirectionType_Decode(V2xFac_DriveDirectionType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag V2xFac_EmbarkationStatusType;


void V2xFac_EmbarkationStatusType_Initialize(V2xFac_EmbarkationStatusType* pVal);

#define ERR_V2XFAC_EMBARKATIONSTATUSTYPE		953  /**/
flag V2xFac_EmbarkationStatusType_IsConstraintValid(const V2xFac_EmbarkationStatusType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EMBARKATIONSTATUSTYPE		954  /**/
#define V2xFac_EmbarkationStatusType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_EmbarkationStatusType_REQUIRED_BITS_FOR_ENCODING        1

flag V2xFac_EmbarkationStatusType_Encode(const V2xFac_EmbarkationStatusType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EMBARKATIONSTATUSTYPE		955  /**/
flag V2xFac_EmbarkationStatusType_Decode(V2xFac_EmbarkationStatusType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef asn1SccSint V2xFac_LongitudinalAccelerationValueType;


void V2xFac_LongitudinalAccelerationValueType_Initialize(V2xFac_LongitudinalAccelerationValueType* pVal);

#define ERR_V2XFAC_LONGITUDINALACCELERATIONVALUETYPE		995  /**/
flag V2xFac_LongitudinalAccelerationValueType_IsConstraintValid(const V2xFac_LongitudinalAccelerationValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LONGITUDINALACCELERATIONVALUETYPE		996  /**/
#define V2xFac_LongitudinalAccelerationValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_LongitudinalAccelerationValueType_REQUIRED_BITS_FOR_ENCODING        9

flag V2xFac_LongitudinalAccelerationValueType_Encode(const V2xFac_LongitudinalAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LONGITUDINALACCELERATIONVALUETYPE		997  /**/
flag V2xFac_LongitudinalAccelerationValueType_Decode(V2xFac_LongitudinalAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_AccelerationConfidenceType;


void V2xFac_AccelerationConfidenceType_Initialize(V2xFac_AccelerationConfidenceType* pVal);

#define ERR_V2XFAC_ACCELERATIONCONFIDENCETYPE		1002  /**/
flag V2xFac_AccelerationConfidenceType_IsConstraintValid(const V2xFac_AccelerationConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ACCELERATIONCONFIDENCETYPE		1003  /**/
#define V2xFac_AccelerationConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_AccelerationConfidenceType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_AccelerationConfidenceType_Encode(const V2xFac_AccelerationConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ACCELERATIONCONFIDENCETYPE		1004  /**/
flag V2xFac_AccelerationConfidenceType_Decode(V2xFac_AccelerationConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_LongitudinalAccelerationType --------------------------------------------*/
typedef struct {
    V2xFac_LongitudinalAccelerationValueType longitudinalAccelerationValue;
    V2xFac_AccelerationConfidenceType longitudinalAccelerationConfidence;

} V2xFac_LongitudinalAccelerationType;

void V2xFac_LongitudinalAccelerationType_Initialize(V2xFac_LongitudinalAccelerationType* pVal);

#define ERR_V2XFAC_LONGITUDINALACCELERATIONTYPE		988  /**/
#define ERR_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONVALUE_2		967  /**/
#define ERR_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONCONFIDENCE_2		981  /**/
flag V2xFac_LongitudinalAccelerationType_IsConstraintValid(const V2xFac_LongitudinalAccelerationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LONGITUDINALACCELERATIONTYPE		989  /**/
#define ERR_UPER_ENCODE_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONVALUE_2		968  /**/
#define ERR_UPER_ENCODE_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONCONFIDENCE_2		982  /**/
#define V2xFac_LongitudinalAccelerationType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_LongitudinalAccelerationType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_LongitudinalAccelerationType_Encode(const V2xFac_LongitudinalAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LONGITUDINALACCELERATIONTYPE		990  /**/
#define ERR_UPER_DECODE_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONVALUE_2		969  /**/
#define ERR_UPER_DECODE_V2XFAC_LONGITUDINALACCELERATIONTYPE_LONGITUDINALACCELERATIONCONFIDENCE_2		983  /**/
flag V2xFac_LongitudinalAccelerationType_Decode(V2xFac_LongitudinalAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_LateralAccelerationValueType;


void V2xFac_LateralAccelerationValueType_Initialize(V2xFac_LateralAccelerationValueType* pVal);

#define ERR_V2XFAC_LATERALACCELERATIONVALUETYPE		1044  /**/
flag V2xFac_LateralAccelerationValueType_IsConstraintValid(const V2xFac_LateralAccelerationValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LATERALACCELERATIONVALUETYPE		1045  /**/
#define V2xFac_LateralAccelerationValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_LateralAccelerationValueType_REQUIRED_BITS_FOR_ENCODING        9

flag V2xFac_LateralAccelerationValueType_Encode(const V2xFac_LateralAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LATERALACCELERATIONVALUETYPE		1046  /**/
flag V2xFac_LateralAccelerationValueType_Decode(V2xFac_LateralAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_LateralAccelerationType --------------------------------------------*/
typedef struct {
    V2xFac_LateralAccelerationValueType lateralAccelerationValue;
    V2xFac_AccelerationConfidenceType lateralAccelerationConfidence;

} V2xFac_LateralAccelerationType;

void V2xFac_LateralAccelerationType_Initialize(V2xFac_LateralAccelerationType* pVal);

#define ERR_V2XFAC_LATERALACCELERATIONTYPE		1037  /**/
#define ERR_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONVALUE_2		1016  /**/
#define ERR_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONCONFIDENCE_2		1030  /**/
flag V2xFac_LateralAccelerationType_IsConstraintValid(const V2xFac_LateralAccelerationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LATERALACCELERATIONTYPE		1038  /**/
#define ERR_UPER_ENCODE_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONVALUE_2		1017  /**/
#define ERR_UPER_ENCODE_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONCONFIDENCE_2		1031  /**/
#define V2xFac_LateralAccelerationType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_LateralAccelerationType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_LateralAccelerationType_Encode(const V2xFac_LateralAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LATERALACCELERATIONTYPE		1039  /**/
#define ERR_UPER_DECODE_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONVALUE_2		1018  /**/
#define ERR_UPER_DECODE_V2XFAC_LATERALACCELERATIONTYPE_LATERALACCELERATIONCONFIDENCE_2		1032  /**/
flag V2xFac_LateralAccelerationType_Decode(V2xFac_LateralAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_VerticalAccelerationValueType;


void V2xFac_VerticalAccelerationValueType_Initialize(V2xFac_VerticalAccelerationValueType* pVal);

#define ERR_V2XFAC_VERTICALACCELERATIONVALUETYPE		1086  /**/
flag V2xFac_VerticalAccelerationValueType_IsConstraintValid(const V2xFac_VerticalAccelerationValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VERTICALACCELERATIONVALUETYPE		1087  /**/
#define V2xFac_VerticalAccelerationValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_VerticalAccelerationValueType_REQUIRED_BITS_FOR_ENCODING        9

flag V2xFac_VerticalAccelerationValueType_Encode(const V2xFac_VerticalAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VERTICALACCELERATIONVALUETYPE		1088  /**/
flag V2xFac_VerticalAccelerationValueType_Decode(V2xFac_VerticalAccelerationValueType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_VerticalAccelerationType --------------------------------------------*/
typedef struct {
    V2xFac_VerticalAccelerationValueType verticalAccelerationValue;
    V2xFac_AccelerationConfidenceType verticalAccelerationConfidence;

} V2xFac_VerticalAccelerationType;

void V2xFac_VerticalAccelerationType_Initialize(V2xFac_VerticalAccelerationType* pVal);

#define ERR_V2XFAC_VERTICALACCELERATIONTYPE		1079  /**/
#define ERR_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONVALUE_2		1058  /**/
#define ERR_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONCONFIDENCE_2		1072  /**/
flag V2xFac_VerticalAccelerationType_IsConstraintValid(const V2xFac_VerticalAccelerationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VERTICALACCELERATIONTYPE		1080  /**/
#define ERR_UPER_ENCODE_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONVALUE_2		1059  /**/
#define ERR_UPER_ENCODE_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONCONFIDENCE_2		1073  /**/
#define V2xFac_VerticalAccelerationType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_VerticalAccelerationType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_VerticalAccelerationType_Encode(const V2xFac_VerticalAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VERTICALACCELERATIONTYPE		1081  /**/
#define ERR_UPER_DECODE_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONVALUE_2		1060  /**/
#define ERR_UPER_DECODE_V2XFAC_VERTICALACCELERATIONTYPE_VERTICALACCELERATIONCONFIDENCE_2		1074  /**/
flag V2xFac_VerticalAccelerationType_Decode(V2xFac_VerticalAccelerationType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_StationTypeType;


void V2xFac_StationTypeType_Initialize(V2xFac_StationTypeType* pVal);

#define ERR_V2XFAC_STATIONTYPETYPE		1093  /**/
flag V2xFac_StationTypeType_IsConstraintValid(const V2xFac_StationTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STATIONTYPETYPE		1094  /**/
#define V2xFac_StationTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_StationTypeType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_StationTypeType_Encode(const V2xFac_StationTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STATIONTYPETYPE		1095  /**/
flag V2xFac_StationTypeType_Decode(V2xFac_StationTypeType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_StationTypeType arr[3];
} V2xFac_RestrictedTypesType;

void V2xFac_RestrictedTypesType_Initialize(V2xFac_RestrictedTypesType* pVal);

#define ERR_V2XFAC_RESTRICTEDTYPESTYPE		2094  /**/
#define ERR_V2XFAC_RESTRICTEDTYPESTYPE_ELM_2		2087  /**/
flag V2xFac_RestrictedTypesType_IsConstraintValid(const V2xFac_RestrictedTypesType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_RESTRICTEDTYPESTYPE		2095  /**/
#define ERR_UPER_ENCODE_V2XFAC_RESTRICTEDTYPESTYPE_ELM_2		2088  /**/
#define V2xFac_RestrictedTypesType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_RestrictedTypesType_REQUIRED_BITS_FOR_ENCODING        26

flag V2xFac_RestrictedTypesType_Encode(const V2xFac_RestrictedTypesType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_RESTRICTEDTYPESTYPE		2096  /**/
#define ERR_UPER_DECODE_V2XFAC_RESTRICTEDTYPESTYPE_ELM_2		2089  /**/
flag V2xFac_RestrictedTypesType_Decode(V2xFac_RestrictedTypesType* pVal, BitStream* pBitStrm, int* pErrCode);


#define V2xFac_ExteriorLightsType_LOWBEAMHEADLIGHTSON 0x1  /*(1 << 0)*/
#define V2xFac_ExteriorLightsType_HIGHBEAMHEADLIGHTSON 0x2  /*(1 << 1)*/
#define V2xFac_ExteriorLightsType_LEFTTURNSIGNALON 0x4  /*(1 << 2)*/
#define V2xFac_ExteriorLightsType_RIGHTTURNSIGNALON 0x8  /*(1 << 3)*/
#define V2xFac_ExteriorLightsType_DAYTIMERUNNINGLIGHTSON 0x10  /*(1 << 4)*/
#define V2xFac_ExteriorLightsType_REVERSELIGHTON 0x20  /*(1 << 5)*/
#define V2xFac_ExteriorLightsType_FOGLIGHTON 0x40  /*(1 << 6)*/
#define V2xFac_ExteriorLightsType_PARKINGLIGHTSON 0x80  /*(1 << 7)*/

typedef struct {
    
    byte arr[1];
} V2xFac_ExteriorLightsType;

void V2xFac_ExteriorLightsType_Initialize(V2xFac_ExteriorLightsType* pVal);

#define ERR_V2XFAC_EXTERIORLIGHTSTYPE		1100  /**/
flag V2xFac_ExteriorLightsType_IsConstraintValid(const V2xFac_ExteriorLightsType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EXTERIORLIGHTSTYPE		1101  /**/
#define V2xFac_ExteriorLightsType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_ExteriorLightsType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_ExteriorLightsType_Encode(const V2xFac_ExteriorLightsType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EXTERIORLIGHTSTYPE		1102  /**/
flag V2xFac_ExteriorLightsType_Decode(V2xFac_ExteriorLightsType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_1 = 0,
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_2 = 1,
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_3 = 2,
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_4 = 3,
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_5 = 4,
    v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_6 = 5,
    v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_GASES = 6,
    v2XFAC_DANGEROUSGOODSBASIC_NON_FLAMMABLE_GASES = 7,
    v2XFAC_DANGEROUSGOODSBASIC_TOXIC_GASES = 8,
    v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_LIQUIDS = 9,
    v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_SOLIDS = 10,
    v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_LIBLE_TO_SPONTANEOUS_COMBUSTION = 11,
    v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_EMITTING_FLAMMABLE_GASES_UPON_CONTACT_WITH_WATER = 12,
    v2XFAC_DANGEROUSGOODSBASIC_OXIDIZING_SUBSTANCES = 13,
    v2XFAC_DANGEROUSGOODSBASIC_ORGANIC_PEROXIDES = 14,
    v2XFAC_DANGEROUSGOODSBASIC_TOXIC_SUBSTANCES = 15,
    v2XFAC_DANGEROUSGOODSBASIC_INFECTIOUS_SUBSTANCES = 16,
    v2XFAC_DANGEROUSGOODSBASIC_RADIOACTIVE_MATERIAL = 17,
    v2XFAC_DANGEROUSGOODSBASIC_CORROSIVE_SUBSTANCES = 18,
    v2XFAC_DANGEROUSGOODSBASIC_MISCELLANEOUS_DANGEROUS_SUBSTANCES = 19
} V2xFac_DangerousGoodsBasicType;

// please use the following macros to avoid breaking code.
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_1 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_1
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_2 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_2
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_3 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_3
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_4 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_4
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_5 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_5
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_6 v2XFAC_DANGEROUSGOODSBASIC_EXPLOSIVES_6
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_GASES v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_GASES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_NON_FLAMMABLE_GASES v2XFAC_DANGEROUSGOODSBASIC_NON_FLAMMABLE_GASES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_TOXIC_GASES v2XFAC_DANGEROUSGOODSBASIC_TOXIC_GASES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_LIQUIDS v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_LIQUIDS
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_SOLIDS v2XFAC_DANGEROUSGOODSBASIC_FLAMMABLE_SOLIDS
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_LIBLE_TO_SPONTANEOUS_COMBUSTION v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_LIBLE_TO_SPONTANEOUS_COMBUSTION
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_EMITTING_FLAMMABLE_GASES_UPON_CONTACT_WITH_WATER v2XFAC_DANGEROUSGOODSBASIC_SUBSTANCES_EMITTING_FLAMMABLE_GASES_UPON_CONTACT_WITH_WATER
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_OXIDIZING_SUBSTANCES v2XFAC_DANGEROUSGOODSBASIC_OXIDIZING_SUBSTANCES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_ORGANIC_PEROXIDES v2XFAC_DANGEROUSGOODSBASIC_ORGANIC_PEROXIDES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_TOXIC_SUBSTANCES v2XFAC_DANGEROUSGOODSBASIC_TOXIC_SUBSTANCES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_INFECTIOUS_SUBSTANCES v2XFAC_DANGEROUSGOODSBASIC_INFECTIOUS_SUBSTANCES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_RADIOACTIVE_MATERIAL v2XFAC_DANGEROUSGOODSBASIC_RADIOACTIVE_MATERIAL
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_CORROSIVE_SUBSTANCES v2XFAC_DANGEROUSGOODSBASIC_CORROSIVE_SUBSTANCES
#define V2xFac_DangerousGoodsBasicType_v2XFAC_DANGEROUSGOODSBASIC_MISCELLANEOUS_DANGEROUS_SUBSTANCES v2XFAC_DANGEROUSGOODSBASIC_MISCELLANEOUS_DANGEROUS_SUBSTANCES

void V2xFac_DangerousGoodsBasicType_Initialize(V2xFac_DangerousGoodsBasicType* pVal);

#define ERR_V2XFAC_DANGEROUSGOODSBASICTYPE		1107  /**/
flag V2xFac_DangerousGoodsBasicType_IsConstraintValid(const V2xFac_DangerousGoodsBasicType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSBASICTYPE		1108  /**/
#define V2xFac_DangerousGoodsBasicType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_DangerousGoodsBasicType_REQUIRED_BITS_FOR_ENCODING        5

flag V2xFac_DangerousGoodsBasicType_Encode(const V2xFac_DangerousGoodsBasicType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSBASICTYPE		1109  /**/
flag V2xFac_DangerousGoodsBasicType_Decode(V2xFac_DangerousGoodsBasicType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_DangerousGoodsExtendedType --------------------------------------------*/
typedef asn1SccUint V2xFac_DangerousGoodsExtendedType_unNumber;

typedef char V2xFac_DangerousGoodsExtendedType_emergencyActionCode[25];
typedef char V2xFac_DangerousGoodsExtendedType_phoneNumber[25];
typedef char V2xFac_DangerousGoodsExtendedType_companyName[25];
typedef struct {
    V2xFac_DangerousGoodsBasicType dangerousGoodsType;
    V2xFac_DangerousGoodsExtendedType_unNumber unNumber;
    flag elevatedTemperature;
    flag tunnelsRestricted;
    flag limitedQuantity;
    V2xFac_DangerousGoodsExtendedType_emergencyActionCode emergencyActionCode;
    V2xFac_DangerousGoodsExtendedType_phoneNumber phoneNumber;
    V2xFac_DangerousGoodsExtendedType_companyName companyName;

    struct {
        unsigned int emergencyActionCode:1;
        unsigned int phoneNumber:1;
        unsigned int companyName:1;
    } exist;

} V2xFac_DangerousGoodsExtendedType;

void V2xFac_DangerousGoodsExtendedType_unNumber_Initialize(V2xFac_DangerousGoodsExtendedType_unNumber* pVal);
void V2xFac_DangerousGoodsExtendedType_emergencyActionCode_Initialize(V2xFac_DangerousGoodsExtendedType_emergencyActionCode val);
void V2xFac_DangerousGoodsExtendedType_phoneNumber_Initialize(V2xFac_DangerousGoodsExtendedType_phoneNumber val);
void V2xFac_DangerousGoodsExtendedType_companyName_Initialize(V2xFac_DangerousGoodsExtendedType_companyName val);
void V2xFac_DangerousGoodsExtendedType_Initialize(V2xFac_DangerousGoodsExtendedType* pVal);

#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE		1177  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_DANGEROUSGOODSTYPE_2		1121  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_UNNUMBER		1128  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_ELEVATEDTEMPERATURE		1135  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_TUNNELSRESTRICTED		1142  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_LIMITEDQUANTITY		1149  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_EMERGENCYACTIONCODE		1156  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_PHONENUMBER		1163  /**/
#define ERR_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_COMPANYNAME		1170  /**/
flag V2xFac_DangerousGoodsExtendedType_IsConstraintValid(const V2xFac_DangerousGoodsExtendedType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE		1178  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_DANGEROUSGOODSTYPE_2		1122  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_UNNUMBER		1129  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_ELEVATEDTEMPERATURE		1136  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_TUNNELSRESTRICTED		1143  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_LIMITEDQUANTITY		1150  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_EMERGENCYACTIONCODE		1157  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_PHONENUMBER		1164  /**/
#define ERR_UPER_ENCODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_COMPANYNAME		1171  /**/
#define V2xFac_DangerousGoodsExtendedType_REQUIRED_BYTES_FOR_ENCODING       68 
#define V2xFac_DangerousGoodsExtendedType_REQUIRED_BITS_FOR_ENCODING        544

flag V2xFac_DangerousGoodsExtendedType_Encode(const V2xFac_DangerousGoodsExtendedType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE		1179  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_DANGEROUSGOODSTYPE_2		1123  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_UNNUMBER		1130  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_ELEVATEDTEMPERATURE		1137  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_TUNNELSRESTRICTED		1144  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_LIMITEDQUANTITY		1151  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_EMERGENCYACTIONCODE		1158  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_PHONENUMBER		1165  /**/
#define ERR_UPER_DECODE_V2XFAC_DANGEROUSGOODSEXTENDEDTYPE_COMPANYNAME		1172  /**/
flag V2xFac_DangerousGoodsExtendedType_Decode(V2xFac_DangerousGoodsExtendedType* pVal, BitStream* pBitStrm, int* pErrCode);


#define V2xFac_SpecialTransportTypeType_HEAVYLOAD 0x1  /*(1 << 0)*/
#define V2xFac_SpecialTransportTypeType_EXCESSWIDTH 0x2  /*(1 << 1)*/
#define V2xFac_SpecialTransportTypeType_EXCESSLENGTH 0x4  /*(1 << 2)*/
#define V2xFac_SpecialTransportTypeType_EXCESSHEIGHT 0x8  /*(1 << 3)*/

typedef struct {
    
    byte arr[1];
} V2xFac_SpecialTransportTypeType;

void V2xFac_SpecialTransportTypeType_Initialize(V2xFac_SpecialTransportTypeType* pVal);

#define ERR_V2XFAC_SPECIALTRANSPORTTYPETYPE		1184  /**/
flag V2xFac_SpecialTransportTypeType_IsConstraintValid(const V2xFac_SpecialTransportTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SPECIALTRANSPORTTYPETYPE		1185  /**/
#define V2xFac_SpecialTransportTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SpecialTransportTypeType_REQUIRED_BITS_FOR_ENCODING        4

flag V2xFac_SpecialTransportTypeType_Encode(const V2xFac_SpecialTransportTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SPECIALTRANSPORTTYPETYPE		1186  /**/
flag V2xFac_SpecialTransportTypeType_Decode(V2xFac_SpecialTransportTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_LightBarSirenInUseType_LIGHTBARACTIVATED 0x1  /*(1 << 0)*/
#define V2xFac_LightBarSirenInUseType_SIRENACTIVATED 0x2  /*(1 << 1)*/

typedef struct {
    
    byte arr[1];
} V2xFac_LightBarSirenInUseType;

void V2xFac_LightBarSirenInUseType_Initialize(V2xFac_LightBarSirenInUseType* pVal);

#define ERR_V2XFAC_LIGHTBARSIRENINUSETYPE		1191  /**/
flag V2xFac_LightBarSirenInUseType_IsConstraintValid(const V2xFac_LightBarSirenInUseType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_LIGHTBARSIRENINUSETYPE		1192  /**/
#define V2xFac_LightBarSirenInUseType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_LightBarSirenInUseType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_LightBarSirenInUseType_Encode(const V2xFac_LightBarSirenInUseType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_LIGHTBARSIRENINUSETYPE		1193  /**/
flag V2xFac_LightBarSirenInUseType_Decode(V2xFac_LightBarSirenInUseType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccUint V2xFac_HeightLonCarrType;


void V2xFac_HeightLonCarrType_Initialize(V2xFac_HeightLonCarrType* pVal);

#define ERR_V2XFAC_HEIGHTLONCARRTYPE		1198  /**/
flag V2xFac_HeightLonCarrType_IsConstraintValid(const V2xFac_HeightLonCarrType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_HEIGHTLONCARRTYPE		1199  /**/
#define V2xFac_HeightLonCarrType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_HeightLonCarrType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_HeightLonCarrType_Encode(const V2xFac_HeightLonCarrType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_HEIGHTLONCARRTYPE		1200  /**/
flag V2xFac_HeightLonCarrType_Decode(V2xFac_HeightLonCarrType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PosLonCarrType;


void V2xFac_PosLonCarrType_Initialize(V2xFac_PosLonCarrType* pVal);

#define ERR_V2XFAC_POSLONCARRTYPE		1205  /**/
flag V2xFac_PosLonCarrType_IsConstraintValid(const V2xFac_PosLonCarrType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSLONCARRTYPE		1206  /**/
#define V2xFac_PosLonCarrType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PosLonCarrType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_PosLonCarrType_Encode(const V2xFac_PosLonCarrType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSLONCARRTYPE		1207  /**/
flag V2xFac_PosLonCarrType_Decode(V2xFac_PosLonCarrType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PosPillarType;


void V2xFac_PosPillarType_Initialize(V2xFac_PosPillarType* pVal);

#define ERR_V2XFAC_POSPILLARTYPE		1212  /**/
flag V2xFac_PosPillarType_IsConstraintValid(const V2xFac_PosPillarType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSPILLARTYPE		1213  /**/
#define V2xFac_PosPillarType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PosPillarType_REQUIRED_BITS_FOR_ENCODING        5

flag V2xFac_PosPillarType_Encode(const V2xFac_PosPillarType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSPILLARTYPE		1214  /**/
flag V2xFac_PosPillarType_Decode(V2xFac_PosPillarType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_PosPillarType arr[3];
} V2xFac_PositionOfPillarsType;

void V2xFac_PositionOfPillarsType_Initialize(V2xFac_PositionOfPillarsType* pVal);

#define ERR_V2XFAC_POSITIONOFPILLARSTYPE		2073  /**/
#define ERR_V2XFAC_POSITIONOFPILLARSTYPE_ELM_2		2066  /**/
flag V2xFac_PositionOfPillarsType_IsConstraintValid(const V2xFac_PositionOfPillarsType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSITIONOFPILLARSTYPE		2074  /**/
#define ERR_UPER_ENCODE_V2XFAC_POSITIONOFPILLARSTYPE_ELM_2		2067  /**/
#define V2xFac_PositionOfPillarsType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_PositionOfPillarsType_REQUIRED_BITS_FOR_ENCODING        17

flag V2xFac_PositionOfPillarsType_Encode(const V2xFac_PositionOfPillarsType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSITIONOFPILLARSTYPE		2075  /**/
#define ERR_UPER_DECODE_V2XFAC_POSITIONOFPILLARSTYPE_ELM_2		2068  /**/
flag V2xFac_PositionOfPillarsType_Decode(V2xFac_PositionOfPillarsType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PosCentMassType;


void V2xFac_PosCentMassType_Initialize(V2xFac_PosCentMassType* pVal);

#define ERR_V2XFAC_POSCENTMASSTYPE		1219  /**/
flag V2xFac_PosCentMassType_IsConstraintValid(const V2xFac_PosCentMassType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSCENTMASSTYPE		1220  /**/
#define V2xFac_PosCentMassType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PosCentMassType_REQUIRED_BITS_FOR_ENCODING        6

flag V2xFac_PosCentMassType_Encode(const V2xFac_PosCentMassType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSCENTMASSTYPE		1221  /**/
flag V2xFac_PosCentMassType_Decode(V2xFac_PosCentMassType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_REQUEST = 0,
    v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_RESPONSE = 1
} V2xFac_RequestResponseIndicationType;

// please use the following macros to avoid breaking code.
#define V2xFac_RequestResponseIndicationType_v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_REQUEST v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_REQUEST
#define V2xFac_RequestResponseIndicationType_v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_RESPONSE v2XFAC_REQUEST_RESPONSE_INDICATION_TYPE_RESPONSE

void V2xFac_RequestResponseIndicationType_Initialize(V2xFac_RequestResponseIndicationType* pVal);

#define ERR_V2XFAC_REQUESTRESPONSEINDICATIONTYPE		1226  /**/
flag V2xFac_RequestResponseIndicationType_IsConstraintValid(const V2xFac_RequestResponseIndicationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_REQUESTRESPONSEINDICATIONTYPE		1227  /**/
#define V2xFac_RequestResponseIndicationType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RequestResponseIndicationType_REQUIRED_BITS_FOR_ENCODING        1

flag V2xFac_RequestResponseIndicationType_Encode(const V2xFac_RequestResponseIndicationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_REQUESTRESPONSEINDICATIONTYPE		1228  /**/
flag V2xFac_RequestResponseIndicationType_Decode(V2xFac_RequestResponseIndicationType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SpeedLimitType;


void V2xFac_SpeedLimitType_Initialize(V2xFac_SpeedLimitType* pVal);

#define ERR_V2XFAC_SPEEDLIMITTYPE		1233  /**/
flag V2xFac_SpeedLimitType_IsConstraintValid(const V2xFac_SpeedLimitType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SPEEDLIMITTYPE		1234  /**/
#define V2xFac_SpeedLimitType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SpeedLimitType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_SpeedLimitType_Encode(const V2xFac_SpeedLimitType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SPEEDLIMITTYPE		1235  /**/
flag V2xFac_SpeedLimitType_Decode(V2xFac_SpeedLimitType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_STATIONARYSINCE_LESS_THAN_1_MINUTE = 0,
    v2XFAC_STATIONARYSINCE_LESS_THAN_2_MINUTES = 1,
    v2XFAC_STATIONARYSINCE_LESS_THAN_15_MINUTES = 2,
    v2XFAC_STATIONARYSINCE_EQUAL_OR_GREATER_15_MINUTES = 3
} V2xFac_StationarySinceType;

// please use the following macros to avoid breaking code.
#define V2xFac_StationarySinceType_v2XFAC_STATIONARYSINCE_LESS_THAN_1_MINUTE v2XFAC_STATIONARYSINCE_LESS_THAN_1_MINUTE
#define V2xFac_StationarySinceType_v2XFAC_STATIONARYSINCE_LESS_THAN_2_MINUTES v2XFAC_STATIONARYSINCE_LESS_THAN_2_MINUTES
#define V2xFac_StationarySinceType_v2XFAC_STATIONARYSINCE_LESS_THAN_15_MINUTES v2XFAC_STATIONARYSINCE_LESS_THAN_15_MINUTES
#define V2xFac_StationarySinceType_v2XFAC_STATIONARYSINCE_EQUAL_OR_GREATER_15_MINUTES v2XFAC_STATIONARYSINCE_EQUAL_OR_GREATER_15_MINUTES

void V2xFac_StationarySinceType_Initialize(V2xFac_StationarySinceType* pVal);

#define ERR_V2XFAC_STATIONARYSINCETYPE		1240  /**/
flag V2xFac_StationarySinceType_IsConstraintValid(const V2xFac_StationarySinceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STATIONARYSINCETYPE		1241  /**/
#define V2xFac_StationarySinceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_StationarySinceType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_StationarySinceType_Encode(const V2xFac_StationarySinceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STATIONARYSINCETYPE		1242  /**/
flag V2xFac_StationarySinceType_Decode(V2xFac_StationarySinceType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint V2xFac_TemperatureType;


void V2xFac_TemperatureType_Initialize(V2xFac_TemperatureType* pVal);

#define ERR_V2XFAC_TEMPERATURETYPE		1247  /**/
flag V2xFac_TemperatureType_IsConstraintValid(const V2xFac_TemperatureType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TEMPERATURETYPE		1248  /**/
#define V2xFac_TemperatureType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_TemperatureType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_TemperatureType_Encode(const V2xFac_TemperatureType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TEMPERATURETYPE		1249  /**/
flag V2xFac_TemperatureType_Decode(V2xFac_TemperatureType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_TRAFFICRULE_NO_PASSING = 0,
    v2XFAC_TRAFFICRULE_NO_PASSING_FOR_TRUCKS = 1,
    v2XFAC_TRAFFICRULE_PASS_TO_RIGHT = 2,
    v2XFAC_TRAFFICRULE_PASS_TO_LEFT = 3
} V2xFac_TrafficRuleType;

// please use the following macros to avoid breaking code.
#define V2xFac_TrafficRuleType_v2XFAC_TRAFFICRULE_NO_PASSING v2XFAC_TRAFFICRULE_NO_PASSING
#define V2xFac_TrafficRuleType_v2XFAC_TRAFFICRULE_NO_PASSING_FOR_TRUCKS v2XFAC_TRAFFICRULE_NO_PASSING_FOR_TRUCKS
#define V2xFac_TrafficRuleType_v2XFAC_TRAFFICRULE_PASS_TO_RIGHT v2XFAC_TRAFFICRULE_PASS_TO_RIGHT
#define V2xFac_TrafficRuleType_v2XFAC_TRAFFICRULE_PASS_TO_LEFT v2XFAC_TRAFFICRULE_PASS_TO_LEFT

void V2xFac_TrafficRuleType_Initialize(V2xFac_TrafficRuleType* pVal);

#define ERR_V2XFAC_TRAFFICRULETYPE		1254  /**/
flag V2xFac_TrafficRuleType_IsConstraintValid(const V2xFac_TrafficRuleType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TRAFFICRULETYPE		1255  /**/
#define V2xFac_TrafficRuleType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_TrafficRuleType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_TrafficRuleType_Encode(const V2xFac_TrafficRuleType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TRAFFICRULETYPE		1256  /**/
flag V2xFac_TrafficRuleType_Decode(V2xFac_TrafficRuleType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccUint V2xFac_WheelBaseVehicleType;


void V2xFac_WheelBaseVehicleType_Initialize(V2xFac_WheelBaseVehicleType* pVal);

#define ERR_V2XFAC_WHEELBASEVEHICLETYPE		1261  /**/
flag V2xFac_WheelBaseVehicleType_IsConstraintValid(const V2xFac_WheelBaseVehicleType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_WHEELBASEVEHICLETYPE		1262  /**/
#define V2xFac_WheelBaseVehicleType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_WheelBaseVehicleType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_WheelBaseVehicleType_Encode(const V2xFac_WheelBaseVehicleType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_WHEELBASEVEHICLETYPE		1263  /**/
flag V2xFac_WheelBaseVehicleType_Decode(V2xFac_WheelBaseVehicleType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_TurningRadiusType;


void V2xFac_TurningRadiusType_Initialize(V2xFac_TurningRadiusType* pVal);

#define ERR_V2XFAC_TURNINGRADIUSTYPE		1268  /**/
flag V2xFac_TurningRadiusType_IsConstraintValid(const V2xFac_TurningRadiusType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TURNINGRADIUSTYPE		1269  /**/
#define V2xFac_TurningRadiusType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_TurningRadiusType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_TurningRadiusType_Encode(const V2xFac_TurningRadiusType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TURNINGRADIUSTYPE		1270  /**/
flag V2xFac_TurningRadiusType_Decode(V2xFac_TurningRadiusType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_PosFrontAxType;


void V2xFac_PosFrontAxType_Initialize(V2xFac_PosFrontAxType* pVal);

#define ERR_V2XFAC_POSFRONTAXTYPE		1275  /**/
flag V2xFac_PosFrontAxType_IsConstraintValid(const V2xFac_PosFrontAxType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSFRONTAXTYPE		1276  /**/
#define V2xFac_PosFrontAxType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PosFrontAxType_REQUIRED_BITS_FOR_ENCODING        5

flag V2xFac_PosFrontAxType_Encode(const V2xFac_PosFrontAxType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSFRONTAXTYPE		1277  /**/
flag V2xFac_PosFrontAxType_Decode(V2xFac_PosFrontAxType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_PositionOfOccupantsType_ROW1LEFTOCCUPIED 0x1  /*(1 << 0)*/
#define V2xFac_PositionOfOccupantsType_ROW1RIGHTOCCUPIED 0x2  /*(1 << 1)*/
#define V2xFac_PositionOfOccupantsType_ROW1MIDOCCUPIED 0x4  /*(1 << 2)*/
#define V2xFac_PositionOfOccupantsType_ROW1NOTDETECTABLE 0x8  /*(1 << 3)*/
#define V2xFac_PositionOfOccupantsType_ROW1NOTPRESENT 0x10  /*(1 << 4)*/
#define V2xFac_PositionOfOccupantsType_ROW2LEFTOCCUPIED 0x20  /*(1 << 5)*/
#define V2xFac_PositionOfOccupantsType_ROW2RIGHTOCCUPIED 0x40  /*(1 << 6)*/
#define V2xFac_PositionOfOccupantsType_ROW2MIDOCCUPIED 0x80  /*(1 << 7)*/
#define V2xFac_PositionOfOccupantsType_ROW2NOTDETECTABLE 0x100  /*(1 << 8)*/
#define V2xFac_PositionOfOccupantsType_ROW2NOTPRESENT 0x200  /*(1 << 9)*/
#define V2xFac_PositionOfOccupantsType_ROW3LEFTOCCUPIED 0x400  /*(1 << 10)*/
#define V2xFac_PositionOfOccupantsType_ROW3RIGHTOCCUPIED 0x800  /*(1 << 11)*/
#define V2xFac_PositionOfOccupantsType_ROW3MIDOCCUPIED 0x1000  /*(1 << 12)*/
#define V2xFac_PositionOfOccupantsType_ROW3NOTDETECTABLE 0x2000  /*(1 << 13)*/
#define V2xFac_PositionOfOccupantsType_ROW3NOTPRESENT 0x4000  /*(1 << 14)*/
#define V2xFac_PositionOfOccupantsType_ROW4LEFTOCCUPIED 0x8000  /*(1 << 15)*/
#define V2xFac_PositionOfOccupantsType_ROW4RIGHTOCCUPIED 0x10000  /*(1 << 16)*/
#define V2xFac_PositionOfOccupantsType_ROW4MIDOCCUPIED 0x20000  /*(1 << 17)*/
#define V2xFac_PositionOfOccupantsType_ROW4NOTDETECTABLE 0x40000  /*(1 << 18)*/
#define V2xFac_PositionOfOccupantsType_ROW4NOTPRESENT 0x80000  /*(1 << 19)*/

typedef struct {
    
    byte arr[3];
} V2xFac_PositionOfOccupantsType;

void V2xFac_PositionOfOccupantsType_Initialize(V2xFac_PositionOfOccupantsType* pVal);

#define ERR_V2XFAC_POSITIONOFOCCUPANTSTYPE		1282  /**/
flag V2xFac_PositionOfOccupantsType_IsConstraintValid(const V2xFac_PositionOfOccupantsType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSITIONOFOCCUPANTSTYPE		1283  /**/
#define V2xFac_PositionOfOccupantsType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_PositionOfOccupantsType_REQUIRED_BITS_FOR_ENCODING        20

flag V2xFac_PositionOfOccupantsType_Encode(const V2xFac_PositionOfOccupantsType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSITIONOFOCCUPANTSTYPE		1284  /**/
flag V2xFac_PositionOfOccupantsType_Decode(V2xFac_PositionOfOccupantsType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef enum {
    v2XFAC_POSITIONINGSOLUTIONTYPE_NO_POSITIONING_SOLUTION = 0,
    v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSS = 1,
    v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSS = 2,
    v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSSPLUSDR = 3,
    v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSSPLUSDR = 4,
    v2XFAC_POSITIONINGSOLUTIONTYPE_DR = 5
} V2xFac_PositioningSolutionTypeType;

// please use the following macros to avoid breaking code.
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_NO_POSITIONING_SOLUTION v2XFAC_POSITIONINGSOLUTIONTYPE_NO_POSITIONING_SOLUTION
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSS v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSS
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSS v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSS
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSSPLUSDR v2XFAC_POSITIONINGSOLUTIONTYPE_SGNSSPLUSDR
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSSPLUSDR v2XFAC_POSITIONINGSOLUTIONTYPE_DGNSSPLUSDR
#define V2xFac_PositioningSolutionTypeType_v2XFAC_POSITIONINGSOLUTIONTYPE_DR v2XFAC_POSITIONINGSOLUTIONTYPE_DR

void V2xFac_PositioningSolutionTypeType_Initialize(V2xFac_PositioningSolutionTypeType* pVal);

#define ERR_V2XFAC_POSITIONINGSOLUTIONTYPETYPE		1289  /**/
flag V2xFac_PositioningSolutionTypeType_IsConstraintValid(const V2xFac_PositioningSolutionTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_POSITIONINGSOLUTIONTYPETYPE		1290  /**/
#define V2xFac_PositioningSolutionTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_PositioningSolutionTypeType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_PositioningSolutionTypeType_Encode(const V2xFac_PositioningSolutionTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_POSITIONINGSOLUTIONTYPETYPE		1291  /**/
flag V2xFac_PositioningSolutionTypeType_Decode(V2xFac_PositioningSolutionTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef char V2xFac_WMInumberType[4];

void V2xFac_WMInumberType_Initialize(V2xFac_WMInumberType val);

#define ERR_V2XFAC_WMINUMBERTYPE		1331  /**/
flag V2xFac_WMInumberType_IsConstraintValid(const V2xFac_WMInumberType val, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_WMINUMBERTYPE		1332  /**/
#define V2xFac_WMInumberType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_WMInumberType_REQUIRED_BITS_FOR_ENCODING        23

flag V2xFac_WMInumberType_Encode(const V2xFac_WMInumberType val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_WMINUMBERTYPE		1333  /**/
flag V2xFac_WMInumberType_Decode(V2xFac_WMInumberType val, BitStream* pBitStrm, int* pErrCode);
typedef char V2xFac_VDSType[7];

void V2xFac_VDSType_Initialize(V2xFac_VDSType val);

#define ERR_V2XFAC_VDSTYPE		1338  /**/
flag V2xFac_VDSType_IsConstraintValid(const V2xFac_VDSType val, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VDSTYPE		1339  /**/
#define V2xFac_VDSType_REQUIRED_BYTES_FOR_ENCODING       6 
#define V2xFac_VDSType_REQUIRED_BITS_FOR_ENCODING        42

flag V2xFac_VDSType_Encode(const V2xFac_VDSType val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VDSTYPE		1340  /**/
flag V2xFac_VDSType_Decode(V2xFac_VDSType val, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_VehicleIdentificationType --------------------------------------------*/
typedef struct {
    V2xFac_WMInumberType wmiNumber;
    V2xFac_VDSType vds;

    struct {
        unsigned int wmiNumber:1;
        unsigned int vds:1;
    } exist;

} V2xFac_VehicleIdentificationType;

void V2xFac_VehicleIdentificationType_Initialize(V2xFac_VehicleIdentificationType* pVal);

#define ERR_V2XFAC_VEHICLEIDENTIFICATIONTYPE		1324  /**/
#define ERR_V2XFAC_VEHICLEIDENTIFICATIONTYPE_WMINUMBER_2		1303  /**/
#define ERR_V2XFAC_VEHICLEIDENTIFICATIONTYPE_VDS_2		1317  /**/
flag V2xFac_VehicleIdentificationType_IsConstraintValid(const V2xFac_VehicleIdentificationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE		1325  /**/
#define ERR_UPER_ENCODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE_WMINUMBER_2		1304  /**/
#define ERR_UPER_ENCODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE_VDS_2		1318  /**/
#define V2xFac_VehicleIdentificationType_REQUIRED_BYTES_FOR_ENCODING       9 
#define V2xFac_VehicleIdentificationType_REQUIRED_BITS_FOR_ENCODING        67

flag V2xFac_VehicleIdentificationType_Encode(const V2xFac_VehicleIdentificationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE		1326  /**/
#define ERR_UPER_DECODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE_WMINUMBER_2		1305  /**/
#define ERR_UPER_DECODE_V2XFAC_VEHICLEIDENTIFICATIONTYPE_VDS_2		1319  /**/
flag V2xFac_VehicleIdentificationType_Decode(V2xFac_VehicleIdentificationType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_EnergyStorageTypeType_HYDROGENSTORAGE 0x1  /*(1 << 0)*/
#define V2xFac_EnergyStorageTypeType_ELECTRICENERGYSTORAGE 0x2  /*(1 << 1)*/
#define V2xFac_EnergyStorageTypeType_LIQUIDPROPANEGAS 0x4  /*(1 << 2)*/
#define V2xFac_EnergyStorageTypeType_COMPRESSEDNATURALGAS 0x8  /*(1 << 3)*/
#define V2xFac_EnergyStorageTypeType_DIESEL 0x10  /*(1 << 4)*/
#define V2xFac_EnergyStorageTypeType_GASOLINE 0x20  /*(1 << 5)*/
#define V2xFac_EnergyStorageTypeType_AMMONIA 0x40  /*(1 << 6)*/

typedef struct {
    
    byte arr[1];
} V2xFac_EnergyStorageTypeType;

void V2xFac_EnergyStorageTypeType_Initialize(V2xFac_EnergyStorageTypeType* pVal);

#define ERR_V2XFAC_ENERGYSTORAGETYPETYPE		1345  /**/
flag V2xFac_EnergyStorageTypeType_IsConstraintValid(const V2xFac_EnergyStorageTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ENERGYSTORAGETYPETYPE		1346  /**/
#define V2xFac_EnergyStorageTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_EnergyStorageTypeType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_EnergyStorageTypeType_Encode(const V2xFac_EnergyStorageTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ENERGYSTORAGETYPETYPE		1347  /**/
flag V2xFac_EnergyStorageTypeType_Decode(V2xFac_EnergyStorageTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_VehicleLengthValueType;


void V2xFac_VehicleLengthValueType_Initialize(V2xFac_VehicleLengthValueType* pVal);

#define ERR_V2XFAC_VEHICLELENGTHVALUETYPE		1387  /**/
flag V2xFac_VehicleLengthValueType_IsConstraintValid(const V2xFac_VehicleLengthValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLELENGTHVALUETYPE		1388  /**/
#define V2xFac_VehicleLengthValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_VehicleLengthValueType_REQUIRED_BITS_FOR_ENCODING        10

flag V2xFac_VehicleLengthValueType_Encode(const V2xFac_VehicleLengthValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLELENGTHVALUETYPE		1389  /**/
flag V2xFac_VehicleLengthValueType_Decode(V2xFac_VehicleLengthValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_NOTRAILERPRESENT = 0,
    v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHKNOWNLENGTH = 1,
    v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHUNKNOWNLENGTH = 2,
    v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENCEISUNKNOWN = 3,
    v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_UNAVAILABLE = 4
} V2xFac_VehicleLengthConfidenceIndicationType;

// please use the following macros to avoid breaking code.
#define V2xFac_VehicleLengthConfidenceIndicationType_v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_NOTRAILERPRESENT v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_NOTRAILERPRESENT
#define V2xFac_VehicleLengthConfidenceIndicationType_v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHKNOWNLENGTH v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHKNOWNLENGTH
#define V2xFac_VehicleLengthConfidenceIndicationType_v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHUNKNOWNLENGTH v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENTWITHUNKNOWNLENGTH
#define V2xFac_VehicleLengthConfidenceIndicationType_v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENCEISUNKNOWN v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_TRAILERPRESENCEISUNKNOWN
#define V2xFac_VehicleLengthConfidenceIndicationType_v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_UNAVAILABLE v2XFAC_VEHICLELENGTHCONFIDENCEINDICATION_UNAVAILABLE

void V2xFac_VehicleLengthConfidenceIndicationType_Initialize(V2xFac_VehicleLengthConfidenceIndicationType* pVal);

#define ERR_V2XFAC_VEHICLELENGTHCONFIDENCEINDICATIONTYPE		1394  /**/
flag V2xFac_VehicleLengthConfidenceIndicationType_IsConstraintValid(const V2xFac_VehicleLengthConfidenceIndicationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLELENGTHCONFIDENCEINDICATIONTYPE		1395  /**/
#define V2xFac_VehicleLengthConfidenceIndicationType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_VehicleLengthConfidenceIndicationType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_VehicleLengthConfidenceIndicationType_Encode(const V2xFac_VehicleLengthConfidenceIndicationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLELENGTHCONFIDENCEINDICATIONTYPE		1396  /**/
flag V2xFac_VehicleLengthConfidenceIndicationType_Decode(V2xFac_VehicleLengthConfidenceIndicationType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_VehicleLengthType --------------------------------------------*/
typedef struct {
    V2xFac_VehicleLengthValueType vehicleLengthValue;
    V2xFac_VehicleLengthConfidenceIndicationType vehicleLengthConfidenceIndication;

} V2xFac_VehicleLengthType;

void V2xFac_VehicleLengthType_Initialize(V2xFac_VehicleLengthType* pVal);

#define ERR_V2XFAC_VEHICLELENGTHTYPE		1380  /**/
#define ERR_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHVALUE_2		1359  /**/
#define ERR_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHCONFIDENCEINDICATION_2		1373  /**/
flag V2xFac_VehicleLengthType_IsConstraintValid(const V2xFac_VehicleLengthType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLELENGTHTYPE		1381  /**/
#define ERR_UPER_ENCODE_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHVALUE_2		1360  /**/
#define ERR_UPER_ENCODE_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHCONFIDENCEINDICATION_2		1374  /**/
#define V2xFac_VehicleLengthType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_VehicleLengthType_REQUIRED_BITS_FOR_ENCODING        13

flag V2xFac_VehicleLengthType_Encode(const V2xFac_VehicleLengthType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLELENGTHTYPE		1382  /**/
#define ERR_UPER_DECODE_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHVALUE_2		1361  /**/
#define ERR_UPER_DECODE_V2XFAC_VEHICLELENGTHTYPE_VEHICLELENGTHCONFIDENCEINDICATION_2		1375  /**/
flag V2xFac_VehicleLengthType_Decode(V2xFac_VehicleLengthType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_VehicleWidthType;


void V2xFac_VehicleWidthType_Initialize(V2xFac_VehicleWidthType* pVal);

#define ERR_V2XFAC_VEHICLEWIDTHTYPE		1401  /**/
flag V2xFac_VehicleWidthType_IsConstraintValid(const V2xFac_VehicleWidthType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLEWIDTHTYPE		1402  /**/
#define V2xFac_VehicleWidthType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_VehicleWidthType_REQUIRED_BITS_FOR_ENCODING        6

flag V2xFac_VehicleWidthType_Encode(const V2xFac_VehicleWidthType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLEWIDTHTYPE		1403  /**/
flag V2xFac_VehicleWidthType_Decode(V2xFac_VehicleWidthType* pVal, BitStream* pBitStrm, int* pErrCode);
#define V2xFac_EmergencyPriorityType_REQUESTFORRIGHTOFWAY 0x1  /*(1 << 0)*/
#define V2xFac_EmergencyPriorityType_REQUESTFORFREECROSSINGATATRAFFICLIGHT 0x2  /*(1 << 1)*/

typedef struct {
    
    byte arr[1];
} V2xFac_EmergencyPriorityType;

void V2xFac_EmergencyPriorityType_Initialize(V2xFac_EmergencyPriorityType* pVal);

#define ERR_V2XFAC_EMERGENCYPRIORITYTYPE		1499  /**/
flag V2xFac_EmergencyPriorityType_IsConstraintValid(const V2xFac_EmergencyPriorityType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EMERGENCYPRIORITYTYPE		1500  /**/
#define V2xFac_EmergencyPriorityType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_EmergencyPriorityType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_EmergencyPriorityType_Encode(const V2xFac_EmergencyPriorityType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EMERGENCYPRIORITYTYPE		1501  /**/
flag V2xFac_EmergencyPriorityType_Decode(V2xFac_EmergencyPriorityType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccUint V2xFac_InformationQualityType;


void V2xFac_InformationQualityType_Initialize(V2xFac_InformationQualityType* pVal);

#define ERR_V2XFAC_INFORMATIONQUALITYTYPE		1506  /**/
flag V2xFac_InformationQualityType_IsConstraintValid(const V2xFac_InformationQualityType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_INFORMATIONQUALITYTYPE		1507  /**/
#define V2xFac_InformationQualityType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_InformationQualityType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_InformationQualityType_Encode(const V2xFac_InformationQualityType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_INFORMATIONQUALITYTYPE		1508  /**/
flag V2xFac_InformationQualityType_Decode(V2xFac_InformationQualityType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_EventPointType --------------------------------------------*/
typedef struct {
    V2xFac_DeltaReferencePositionType eventPosition;
    V2xFac_PathDeltaTimeType eventDeltaTime;
    V2xFac_InformationQualityType informationQuality;

    struct {
        unsigned int eventDeltaTime:1;
    } exist;

} V2xFac_EventPointType;

void V2xFac_EventPointType_Initialize(V2xFac_EventPointType* pVal);

#define ERR_V2XFAC_EVENTPOINTTYPE		2290  /**/
#define ERR_V2XFAC_EVENTPOINTTYPE_EVENTPOSITION_2		2255  /**/
#define ERR_V2XFAC_EVENTPOINTTYPE_EVENTDELTATIME_2		2269  /**/
#define ERR_V2XFAC_EVENTPOINTTYPE_INFORMATIONQUALITY_2		2283  /**/
flag V2xFac_EventPointType_IsConstraintValid(const V2xFac_EventPointType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EVENTPOINTTYPE		2291  /**/
#define ERR_UPER_ENCODE_V2XFAC_EVENTPOINTTYPE_EVENTPOSITION_2		2256  /**/
#define ERR_UPER_ENCODE_V2XFAC_EVENTPOINTTYPE_EVENTDELTATIME_2		2270  /**/
#define ERR_UPER_ENCODE_V2XFAC_EVENTPOINTTYPE_INFORMATIONQUALITY_2		2284  /**/
#define V2xFac_EventPointType_REQUIRED_BYTES_FOR_ENCODING       9 
#define V2xFac_EventPointType_REQUIRED_BITS_FOR_ENCODING        71

flag V2xFac_EventPointType_Encode(const V2xFac_EventPointType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EVENTPOINTTYPE		2292  /**/
#define ERR_UPER_DECODE_V2XFAC_EVENTPOINTTYPE_EVENTPOSITION_2		2257  /**/
#define ERR_UPER_DECODE_V2XFAC_EVENTPOINTTYPE_EVENTDELTATIME_2		2271  /**/
#define ERR_UPER_DECODE_V2XFAC_EVENTPOINTTYPE_INFORMATIONQUALITY_2		2285  /**/
flag V2xFac_EventPointType_Decode(V2xFac_EventPointType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_EventPointType arr[23];
} V2xFac_EventHistoryType;

void V2xFac_EventHistoryType_Initialize(V2xFac_EventHistoryType* pVal);

#define ERR_V2XFAC_EVENTHISTORYTYPE		2199  /**/
#define ERR_V2XFAC_EVENTHISTORYTYPE_ELM_2		2192  /**/
flag V2xFac_EventHistoryType_IsConstraintValid(const V2xFac_EventHistoryType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_EVENTHISTORYTYPE		2200  /**/
#define ERR_UPER_ENCODE_V2XFAC_EVENTHISTORYTYPE_ELM_2		2193  /**/
#define V2xFac_EventHistoryType_REQUIRED_BYTES_FOR_ENCODING       205 
#define V2xFac_EventHistoryType_REQUIRED_BITS_FOR_ENCODING        1638

flag V2xFac_EventHistoryType_Encode(const V2xFac_EventHistoryType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_EVENTHISTORYTYPE		2201  /**/
#define ERR_UPER_DECODE_V2XFAC_EVENTHISTORYTYPE_ELM_2		2194  /**/
flag V2xFac_EventHistoryType_Decode(V2xFac_EventHistoryType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef enum {
    v2XFAC_ROADTYPE_URBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES = 0,
    v2XFAC_ROADTYPE_URBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES = 1,
    v2XFAC_ROADTYPE_NONURBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES = 2,
    v2XFAC_ROADTYPE_ONURBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES = 3
} V2xFac_RoadTypeType;

// please use the following macros to avoid breaking code.
#define V2xFac_RoadTypeType_v2XFAC_ROADTYPE_URBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES v2XFAC_ROADTYPE_URBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES
#define V2xFac_RoadTypeType_v2XFAC_ROADTYPE_URBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES v2XFAC_ROADTYPE_URBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES
#define V2xFac_RoadTypeType_v2XFAC_ROADTYPE_NONURBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES v2XFAC_ROADTYPE_NONURBAN_NOSTRUCTURALSEPARATIONTOOPPOSITELANES
#define V2xFac_RoadTypeType_v2XFAC_ROADTYPE_ONURBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES v2XFAC_ROADTYPE_ONURBAN_WITHSTRUCTURALSEPARATIONTOOPPOSITELANES

void V2xFac_RoadTypeType_Initialize(V2xFac_RoadTypeType* pVal);

#define ERR_V2XFAC_ROADTYPETYPE		1513  /**/
flag V2xFac_RoadTypeType_IsConstraintValid(const V2xFac_RoadTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ROADTYPETYPE		1514  /**/
#define V2xFac_RoadTypeType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RoadTypeType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_RoadTypeType_Encode(const V2xFac_RoadTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ROADTYPETYPE		1515  /**/
flag V2xFac_RoadTypeType_Decode(V2xFac_RoadTypeType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint V2xFac_SteeringWheelAngleValueType;


void V2xFac_SteeringWheelAngleValueType_Initialize(V2xFac_SteeringWheelAngleValueType* pVal);

#define ERR_V2XFAC_STEERINGWHEELANGLEVALUETYPE		1555  /**/
flag V2xFac_SteeringWheelAngleValueType_IsConstraintValid(const V2xFac_SteeringWheelAngleValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STEERINGWHEELANGLEVALUETYPE		1556  /**/
#define V2xFac_SteeringWheelAngleValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_SteeringWheelAngleValueType_REQUIRED_BITS_FOR_ENCODING        10

flag V2xFac_SteeringWheelAngleValueType_Encode(const V2xFac_SteeringWheelAngleValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STEERINGWHEELANGLEVALUETYPE		1557  /**/
flag V2xFac_SteeringWheelAngleValueType_Decode(V2xFac_SteeringWheelAngleValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_SteeringWheelAngleConfidenceType;


void V2xFac_SteeringWheelAngleConfidenceType_Initialize(V2xFac_SteeringWheelAngleConfidenceType* pVal);

#define ERR_V2XFAC_STEERINGWHEELANGLECONFIDENCETYPE		1562  /**/
flag V2xFac_SteeringWheelAngleConfidenceType_IsConstraintValid(const V2xFac_SteeringWheelAngleConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STEERINGWHEELANGLECONFIDENCETYPE		1563  /**/
#define V2xFac_SteeringWheelAngleConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_SteeringWheelAngleConfidenceType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_SteeringWheelAngleConfidenceType_Encode(const V2xFac_SteeringWheelAngleConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STEERINGWHEELANGLECONFIDENCETYPE		1564  /**/
flag V2xFac_SteeringWheelAngleConfidenceType_Decode(V2xFac_SteeringWheelAngleConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_SteeringWheelAngleType --------------------------------------------*/
typedef struct {
    V2xFac_SteeringWheelAngleValueType steeringWheelAngleValue;
    V2xFac_SteeringWheelAngleConfidenceType steeringWheelAngleConfidence;

} V2xFac_SteeringWheelAngleType;

void V2xFac_SteeringWheelAngleType_Initialize(V2xFac_SteeringWheelAngleType* pVal);

#define ERR_V2XFAC_STEERINGWHEELANGLETYPE		1548  /**/
#define ERR_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLEVALUE_2		1527  /**/
#define ERR_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLECONFIDENCE_2		1541  /**/
flag V2xFac_SteeringWheelAngleType_IsConstraintValid(const V2xFac_SteeringWheelAngleType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_STEERINGWHEELANGLETYPE		1549  /**/
#define ERR_UPER_ENCODE_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLEVALUE_2		1528  /**/
#define ERR_UPER_ENCODE_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLECONFIDENCE_2		1542  /**/
#define V2xFac_SteeringWheelAngleType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_SteeringWheelAngleType_REQUIRED_BITS_FOR_ENCODING        17

flag V2xFac_SteeringWheelAngleType_Encode(const V2xFac_SteeringWheelAngleType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_STEERINGWHEELANGLETYPE		1550  /**/
#define ERR_UPER_DECODE_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLEVALUE_2		1529  /**/
#define ERR_UPER_DECODE_V2XFAC_STEERINGWHEELANGLETYPE_STEERINGWHEELANGLECONFIDENCE_2		1543  /**/
flag V2xFac_SteeringWheelAngleType_Decode(V2xFac_SteeringWheelAngleType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_TimestampItsType;


void V2xFac_TimestampItsType_Initialize(V2xFac_TimestampItsType* pVal);

#define ERR_V2XFAC_TIMESTAMPITSTYPE		1569  /**/
flag V2xFac_TimestampItsType_IsConstraintValid(const V2xFac_TimestampItsType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TIMESTAMPITSTYPE		1570  /**/
#define V2xFac_TimestampItsType_REQUIRED_BYTES_FOR_ENCODING       6 
#define V2xFac_TimestampItsType_REQUIRED_BITS_FOR_ENCODING        42

flag V2xFac_TimestampItsType_Encode(const V2xFac_TimestampItsType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TIMESTAMPITSTYPE		1571  /**/
flag V2xFac_TimestampItsType_Decode(V2xFac_TimestampItsType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_VEHICLEROLE_DEFAULT = 0,
    v2XFAC_VEHICLEROLE_PUBLIC_TRANSPORT = 1,
    v2XFAC_VEHICLEROLE_SPECIAL_TRANSPORT = 2,
    v2XFAC_VEHICLEROLE_DANGEROUS_GOODS = 3,
    v2XFAC_VEHICLEROLE_ROAD_WORK = 4,
    v2XFAC_VEHICLEROLE_RESCUE = 5,
    v2XFAC_VEHICLEROLE_EMERGENCY = 6,
    v2XFAC_VEHICLEROLE_SAFETY_CAR = 7,
    v2XFAC_VEHICLEROLEAGRICULTURAL = 8,
    v2XFAC_VEHICLEROLE_COMMERCIAL = 9,
    v2XFAC_VEHICLEROLE_MILITARY = 10,
    v2XFAC_VEHICLEROLE_ROAD_OPERATOR = 11,
    v2XFAC_VEHICLEROLE_TAXI = 12,
    v2XFAC_VEHICLEROLE_RESERVED_1 = 13,
    v2XFAC_VEHICLEROLE_RESERVED_2 = 14,
    v2XFAC_VEHICLEROLE_RESERVED_3 = 15
} V2xFac_VehicleRoleType;

// please use the following macros to avoid breaking code.
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_DEFAULT v2XFAC_VEHICLEROLE_DEFAULT
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_PUBLIC_TRANSPORT v2XFAC_VEHICLEROLE_PUBLIC_TRANSPORT
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_SPECIAL_TRANSPORT v2XFAC_VEHICLEROLE_SPECIAL_TRANSPORT
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_DANGEROUS_GOODS v2XFAC_VEHICLEROLE_DANGEROUS_GOODS
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_ROAD_WORK v2XFAC_VEHICLEROLE_ROAD_WORK
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_RESCUE v2XFAC_VEHICLEROLE_RESCUE
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_EMERGENCY v2XFAC_VEHICLEROLE_EMERGENCY
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_SAFETY_CAR v2XFAC_VEHICLEROLE_SAFETY_CAR
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLEAGRICULTURAL v2XFAC_VEHICLEROLEAGRICULTURAL
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_COMMERCIAL v2XFAC_VEHICLEROLE_COMMERCIAL
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_MILITARY v2XFAC_VEHICLEROLE_MILITARY
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_ROAD_OPERATOR v2XFAC_VEHICLEROLE_ROAD_OPERATOR
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_TAXI v2XFAC_VEHICLEROLE_TAXI
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_RESERVED_1 v2XFAC_VEHICLEROLE_RESERVED_1
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_RESERVED_2 v2XFAC_VEHICLEROLE_RESERVED_2
#define V2xFac_VehicleRoleType_v2XFAC_VEHICLEROLE_RESERVED_3 v2XFAC_VEHICLEROLE_RESERVED_3

void V2xFac_VehicleRoleType_Initialize(V2xFac_VehicleRoleType* pVal);

#define ERR_V2XFAC_VEHICLEROLETYPE		1576  /**/
flag V2xFac_VehicleRoleType_IsConstraintValid(const V2xFac_VehicleRoleType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VEHICLEROLETYPE		1577  /**/
#define V2xFac_VehicleRoleType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_VehicleRoleType_REQUIRED_BITS_FOR_ENCODING        4

flag V2xFac_VehicleRoleType_Encode(const V2xFac_VehicleRoleType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VEHICLEROLETYPE		1578  /**/
flag V2xFac_VehicleRoleType_Decode(V2xFac_VehicleRoleType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef asn1SccSint V2xFac_YawRateValueType;


void V2xFac_YawRateValueType_Initialize(V2xFac_YawRateValueType* pVal);

#define ERR_V2XFAC_YAWRATEVALUETYPE		1618  /**/
flag V2xFac_YawRateValueType_IsConstraintValid(const V2xFac_YawRateValueType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_YAWRATEVALUETYPE		1619  /**/
#define V2xFac_YawRateValueType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_YawRateValueType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_YawRateValueType_Encode(const V2xFac_YawRateValueType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_YAWRATEVALUETYPE		1620  /**/
flag V2xFac_YawRateValueType_Decode(V2xFac_YawRateValueType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    yAWRATECONFIDENCE_DEGSEC_000_01 = 0,
    yAWRATECONFIDENCE_DEGSEC_000_05 = 1,
    yAWRATECONFIDENCE_DEGSEC_000_10 = 2,
    yAWRATECONFIDENCE_DEGSEC_001_00 = 3,
    yAWRATECONFIDENCE_DEGSEC_005_00 = 4,
    yAWRATECONFIDENCE_DEGSEC_010_00 = 5,
    yAWRATECONFIDENCE_DEGSEC_100_00 = 6,
    yAWRATECONFIDENCE_OUTOFRANGE = 7,
    yAWRATECONFIDENCE_UNAVAILABLE = 8
} V2xFac_YawRateConfidenceType;

// please use the following macros to avoid breaking code.
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_000_01 yAWRATECONFIDENCE_DEGSEC_000_01
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_000_05 yAWRATECONFIDENCE_DEGSEC_000_05
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_000_10 yAWRATECONFIDENCE_DEGSEC_000_10
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_001_00 yAWRATECONFIDENCE_DEGSEC_001_00
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_005_00 yAWRATECONFIDENCE_DEGSEC_005_00
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_010_00 yAWRATECONFIDENCE_DEGSEC_010_00
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_DEGSEC_100_00 yAWRATECONFIDENCE_DEGSEC_100_00
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_OUTOFRANGE yAWRATECONFIDENCE_OUTOFRANGE
#define V2xFac_YawRateConfidenceType_yAWRATECONFIDENCE_UNAVAILABLE yAWRATECONFIDENCE_UNAVAILABLE

void V2xFac_YawRateConfidenceType_Initialize(V2xFac_YawRateConfidenceType* pVal);

#define ERR_V2XFAC_YAWRATECONFIDENCETYPE		1625  /**/
flag V2xFac_YawRateConfidenceType_IsConstraintValid(const V2xFac_YawRateConfidenceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_YAWRATECONFIDENCETYPE		1626  /**/
#define V2xFac_YawRateConfidenceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_YawRateConfidenceType_REQUIRED_BITS_FOR_ENCODING        4

flag V2xFac_YawRateConfidenceType_Encode(const V2xFac_YawRateConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_YAWRATECONFIDENCETYPE		1627  /**/
flag V2xFac_YawRateConfidenceType_Decode(V2xFac_YawRateConfidenceType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_YawRateType --------------------------------------------*/
typedef struct {
    V2xFac_YawRateValueType yawRateValue;
    V2xFac_YawRateConfidenceType yawRateConfidence;

} V2xFac_YawRateType;

void V2xFac_YawRateType_Initialize(V2xFac_YawRateType* pVal);

#define ERR_V2XFAC_YAWRATETYPE		1611  /**/
#define ERR_V2XFAC_YAWRATETYPE_YAWRATEVALUE_2		1590  /**/
#define ERR_V2XFAC_YAWRATETYPE_YAWRATECONFIDENCE_2		1604  /**/
flag V2xFac_YawRateType_IsConstraintValid(const V2xFac_YawRateType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_YAWRATETYPE		1612  /**/
#define ERR_UPER_ENCODE_V2XFAC_YAWRATETYPE_YAWRATEVALUE_2		1591  /**/
#define ERR_UPER_ENCODE_V2XFAC_YAWRATETYPE_YAWRATECONFIDENCE_2		1605  /**/
#define V2xFac_YawRateType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_YawRateType_REQUIRED_BITS_FOR_ENCODING        20

flag V2xFac_YawRateType_Encode(const V2xFac_YawRateType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_YAWRATETYPE		1613  /**/
#define ERR_UPER_DECODE_V2XFAC_YAWRATETYPE_YAWRATEVALUE_2		1592  /**/
#define ERR_UPER_DECODE_V2XFAC_YAWRATETYPE_YAWRATECONFIDENCE_2		1606  /**/
flag V2xFac_YawRateType_Decode(V2xFac_YawRateType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_PROTECTEDZONETYPE_CEN_DSRC_TOLLING = 0
} V2xFac_ProtectedZoneTypeType;

// please use the following macros to avoid breaking code.
#define V2xFac_ProtectedZoneTypeType_v2XFAC_PROTECTEDZONETYPE_CEN_DSRC_TOLLING v2XFAC_PROTECTEDZONETYPE_CEN_DSRC_TOLLING

void V2xFac_ProtectedZoneTypeType_Initialize(V2xFac_ProtectedZoneTypeType* pVal);

#define ERR_V2XFAC_PROTECTEDZONETYPETYPE		1632  /**/
flag V2xFac_ProtectedZoneTypeType_IsConstraintValid(const V2xFac_ProtectedZoneTypeType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDZONETYPETYPE		1633  /**/
#define V2xFac_ProtectedZoneTypeType_REQUIRED_BYTES_FOR_ENCODING       0 
#define V2xFac_ProtectedZoneTypeType_REQUIRED_BITS_FOR_ENCODING        0

flag V2xFac_ProtectedZoneTypeType_Encode(const V2xFac_ProtectedZoneTypeType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PROTECTEDZONETYPETYPE		1634  /**/
flag V2xFac_ProtectedZoneTypeType_Decode(V2xFac_ProtectedZoneTypeType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_50_M = 0,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_100_M = 1,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_200_M = 2,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_500_M = 3,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_1000_M = 4,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_5_KM = 5,
    v2XFAC_RELEVANCEDISTANCE_LESS_THAN_10_KM = 6,
    v2XFAC_RELEVANCEDISTANCE_OVER_10_KM = 7
} V2xFac_RelevanceDistanceType;

// please use the following macros to avoid breaking code.
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_50_M v2XFAC_RELEVANCEDISTANCE_LESS_THAN_50_M
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_100_M v2XFAC_RELEVANCEDISTANCE_LESS_THAN_100_M
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_200_M v2XFAC_RELEVANCEDISTANCE_LESS_THAN_200_M
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_500_M v2XFAC_RELEVANCEDISTANCE_LESS_THAN_500_M
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_1000_M v2XFAC_RELEVANCEDISTANCE_LESS_THAN_1000_M
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_5_KM v2XFAC_RELEVANCEDISTANCE_LESS_THAN_5_KM
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_LESS_THAN_10_KM v2XFAC_RELEVANCEDISTANCE_LESS_THAN_10_KM
#define V2xFac_RelevanceDistanceType_v2XFAC_RELEVANCEDISTANCE_OVER_10_KM v2XFAC_RELEVANCEDISTANCE_OVER_10_KM

void V2xFac_RelevanceDistanceType_Initialize(V2xFac_RelevanceDistanceType* pVal);

#define ERR_V2XFAC_RELEVANCEDISTANCETYPE		1639  /**/
flag V2xFac_RelevanceDistanceType_IsConstraintValid(const V2xFac_RelevanceDistanceType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_RELEVANCEDISTANCETYPE		1640  /**/
#define V2xFac_RelevanceDistanceType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RelevanceDistanceType_REQUIRED_BITS_FOR_ENCODING        3

flag V2xFac_RelevanceDistanceType_Encode(const V2xFac_RelevanceDistanceType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_RELEVANCEDISTANCETYPE		1641  /**/
flag V2xFac_RelevanceDistanceType_Decode(V2xFac_RelevanceDistanceType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    v2XFAC_RELEVANCETRAFFICDIRECTION_ALL_TRAFFIC_DIRECTIONS = 0,
    v2XFAC_RELEVANCETRAFFICDIRECTION_UPSTREAM_TRAFFIC = 1,
    v2XFAC_RELEVANCETRAFFICDIRECTION_DOWNSTREAM_TRAFFIC = 2,
    v2XFAC_RELEVANCETRAFFICDIRECTION_OPPOSITE_TRAFFIC = 3
} V2xFac_RelevanceTrafficDirectionType;

// please use the following macros to avoid breaking code.
#define V2xFac_RelevanceTrafficDirectionType_v2XFAC_RELEVANCETRAFFICDIRECTION_ALL_TRAFFIC_DIRECTIONS v2XFAC_RELEVANCETRAFFICDIRECTION_ALL_TRAFFIC_DIRECTIONS
#define V2xFac_RelevanceTrafficDirectionType_v2XFAC_RELEVANCETRAFFICDIRECTION_UPSTREAM_TRAFFIC v2XFAC_RELEVANCETRAFFICDIRECTION_UPSTREAM_TRAFFIC
#define V2xFac_RelevanceTrafficDirectionType_v2XFAC_RELEVANCETRAFFICDIRECTION_DOWNSTREAM_TRAFFIC v2XFAC_RELEVANCETRAFFICDIRECTION_DOWNSTREAM_TRAFFIC
#define V2xFac_RelevanceTrafficDirectionType_v2XFAC_RELEVANCETRAFFICDIRECTION_OPPOSITE_TRAFFIC v2XFAC_RELEVANCETRAFFICDIRECTION_OPPOSITE_TRAFFIC

void V2xFac_RelevanceTrafficDirectionType_Initialize(V2xFac_RelevanceTrafficDirectionType* pVal);

#define ERR_V2XFAC_RELEVANCETRAFFICDIRECTIONTYPE		1646  /**/
flag V2xFac_RelevanceTrafficDirectionType_IsConstraintValid(const V2xFac_RelevanceTrafficDirectionType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_RELEVANCETRAFFICDIRECTIONTYPE		1647  /**/
#define V2xFac_RelevanceTrafficDirectionType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_RelevanceTrafficDirectionType_REQUIRED_BITS_FOR_ENCODING        2

flag V2xFac_RelevanceTrafficDirectionType_Encode(const V2xFac_RelevanceTrafficDirectionType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_RELEVANCETRAFFICDIRECTIONTYPE		1648  /**/
flag V2xFac_RelevanceTrafficDirectionType_Decode(V2xFac_RelevanceTrafficDirectionType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_TransmissionIntervalType;


void V2xFac_TransmissionIntervalType_Initialize(V2xFac_TransmissionIntervalType* pVal);

#define ERR_V2XFAC_TRANSMISSIONINTERVALTYPE		1653  /**/
flag V2xFac_TransmissionIntervalType_IsConstraintValid(const V2xFac_TransmissionIntervalType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_TRANSMISSIONINTERVALTYPE		1654  /**/
#define V2xFac_TransmissionIntervalType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_TransmissionIntervalType_REQUIRED_BITS_FOR_ENCODING        14

flag V2xFac_TransmissionIntervalType_Encode(const V2xFac_TransmissionIntervalType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_TRANSMISSIONINTERVALTYPE		1655  /**/
flag V2xFac_TransmissionIntervalType_Decode(V2xFac_TransmissionIntervalType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_ValidityDurationType;


void V2xFac_ValidityDurationType_Initialize(V2xFac_ValidityDurationType* pVal);

#define ERR_V2XFAC_VALIDITYDURATIONTYPE		1660  /**/
flag V2xFac_ValidityDurationType_IsConstraintValid(const V2xFac_ValidityDurationType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_VALIDITYDURATIONTYPE		1661  /**/
#define V2xFac_ValidityDurationType_REQUIRED_BYTES_FOR_ENCODING       3 
#define V2xFac_ValidityDurationType_REQUIRED_BITS_FOR_ENCODING        17

flag V2xFac_ValidityDurationType_Encode(const V2xFac_ValidityDurationType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_VALIDITYDURATIONTYPE		1662  /**/
flag V2xFac_ValidityDurationType_Decode(V2xFac_ValidityDurationType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_NumberOfOccupantsType;


void V2xFac_NumberOfOccupantsType_Initialize(V2xFac_NumberOfOccupantsType* pVal);

#define ERR_V2XFAC_NUMBEROFOCCUPANTSTYPE		2045  /**/
flag V2xFac_NumberOfOccupantsType_IsConstraintValid(const V2xFac_NumberOfOccupantsType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_NUMBEROFOCCUPANTSTYPE		2046  /**/
#define V2xFac_NumberOfOccupantsType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_NumberOfOccupantsType_REQUIRED_BITS_FOR_ENCODING        7

flag V2xFac_NumberOfOccupantsType_Encode(const V2xFac_NumberOfOccupantsType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_NUMBEROFOCCUPANTSTYPE		2047  /**/
flag V2xFac_NumberOfOccupantsType_Decode(V2xFac_NumberOfOccupantsType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef asn1SccUint V2xFac_SequenceNumberType;


void V2xFac_SequenceNumberType_Initialize(V2xFac_SequenceNumberType* pVal);

#define ERR_V2XFAC_SEQUENCENUMBERTYPE		2052  /**/
flag V2xFac_SequenceNumberType_IsConstraintValid(const V2xFac_SequenceNumberType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_SEQUENCENUMBERTYPE		2053  /**/
#define V2xFac_SequenceNumberType_REQUIRED_BYTES_FOR_ENCODING       2 
#define V2xFac_SequenceNumberType_REQUIRED_BITS_FOR_ENCODING        16

flag V2xFac_SequenceNumberType_Encode(const V2xFac_SequenceNumberType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_SEQUENCENUMBERTYPE		2054  /**/
flag V2xFac_SequenceNumberType_Decode(V2xFac_SequenceNumberType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_ActionIdType --------------------------------------------*/
typedef struct {
    V2xFac_StationIDType originatingStationID;
    V2xFac_SequenceNumberType sequenceNumber;

} V2xFac_ActionIdType;

void V2xFac_ActionIdType_Initialize(V2xFac_ActionIdType* pVal);

#define ERR_V2XFAC_ACTIONIDTYPE		1695  /**/
#define ERR_V2XFAC_ACTIONIDTYPE_ORIGINATINGSTATIONID_2		1674  /**/
#define ERR_V2XFAC_ACTIONIDTYPE_SEQUENCENUMBER_2		1688  /**/
flag V2xFac_ActionIdType_IsConstraintValid(const V2xFac_ActionIdType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_ACTIONIDTYPE		1696  /**/
#define ERR_UPER_ENCODE_V2XFAC_ACTIONIDTYPE_ORIGINATINGSTATIONID_2		1675  /**/
#define ERR_UPER_ENCODE_V2XFAC_ACTIONIDTYPE_SEQUENCENUMBER_2		1689  /**/
#define V2xFac_ActionIdType_REQUIRED_BYTES_FOR_ENCODING       6 
#define V2xFac_ActionIdType_REQUIRED_BITS_FOR_ENCODING        48

flag V2xFac_ActionIdType_Encode(const V2xFac_ActionIdType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_ACTIONIDTYPE		1697  /**/
#define ERR_UPER_DECODE_V2XFAC_ACTIONIDTYPE_ORIGINATINGSTATIONID_2		1676  /**/
#define ERR_UPER_DECODE_V2XFAC_ACTIONIDTYPE_SEQUENCENUMBER_2		1690  /**/
flag V2xFac_ActionIdType_Decode(V2xFac_ActionIdType* pVal, BitStream* pBitStrm, int* pErrCode);

typedef asn1SccUint V2xFac_ProtectedZoneRadiusType;


void V2xFac_ProtectedZoneRadiusType_Initialize(V2xFac_ProtectedZoneRadiusType* pVal);

#define ERR_V2XFAC_PROTECTEDZONERADIUSTYPE		2458  /**/
flag V2xFac_ProtectedZoneRadiusType_IsConstraintValid(const V2xFac_ProtectedZoneRadiusType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDZONERADIUSTYPE		2459  /**/
#define V2xFac_ProtectedZoneRadiusType_REQUIRED_BYTES_FOR_ENCODING       1 
#define V2xFac_ProtectedZoneRadiusType_REQUIRED_BITS_FOR_ENCODING        8

flag V2xFac_ProtectedZoneRadiusType_Encode(const V2xFac_ProtectedZoneRadiusType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PROTECTEDZONERADIUSTYPE		2460  /**/
flag V2xFac_ProtectedZoneRadiusType_Decode(V2xFac_ProtectedZoneRadiusType* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint V2xFac_ProtectedZoneIDType;


void V2xFac_ProtectedZoneIDType_Initialize(V2xFac_ProtectedZoneIDType* pVal);

#define ERR_V2XFAC_PROTECTEDZONEIDTYPE		2465  /**/
flag V2xFac_ProtectedZoneIDType_IsConstraintValid(const V2xFac_ProtectedZoneIDType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDZONEIDTYPE		2466  /**/
#define V2xFac_ProtectedZoneIDType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_ProtectedZoneIDType_REQUIRED_BITS_FOR_ENCODING        27

flag V2xFac_ProtectedZoneIDType_Encode(const V2xFac_ProtectedZoneIDType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PROTECTEDZONEIDTYPE		2467  /**/
flag V2xFac_ProtectedZoneIDType_Decode(V2xFac_ProtectedZoneIDType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_ProtectedCommunicationZoneType --------------------------------------------*/
typedef struct {
    V2xFac_ProtectedZoneTypeType protectedZoneType;
    V2xFac_TimestampItsType expiryTime;
    V2xFac_LatitudeType protectedZoneLatitude;
    V2xFac_LongitudeType protectedZoneLongitude;
    V2xFac_ProtectedZoneRadiusType protectedZoneRadius;
    V2xFac_ProtectedZoneIDType protectedZoneID;

    struct {
        unsigned int expiryTime:1;
        unsigned int protectedZoneRadius:1;
        unsigned int protectedZoneID:1;
    } exist;

} V2xFac_ProtectedCommunicationZoneType;

void V2xFac_ProtectedCommunicationZoneType_Initialize(V2xFac_ProtectedCommunicationZoneType* pVal);

#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE		1933  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONETYPE_2		1856  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_EXPIRYTIME_2		1870  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELATITUDE_2		1884  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELONGITUDE_2		1898  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONERADIUS_2		1912  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONEID_2		1926  /**/
flag V2xFac_ProtectedCommunicationZoneType_IsConstraintValid(const V2xFac_ProtectedCommunicationZoneType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE		1934  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONETYPE_2		1857  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_EXPIRYTIME_2		1871  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELATITUDE_2		1885  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELONGITUDE_2		1899  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONERADIUS_2		1913  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONEID_2		1927  /**/
#define V2xFac_ProtectedCommunicationZoneType_REQUIRED_BYTES_FOR_ENCODING       18 
#define V2xFac_ProtectedCommunicationZoneType_REQUIRED_BITS_FOR_ENCODING        143

flag V2xFac_ProtectedCommunicationZoneType_Encode(const V2xFac_ProtectedCommunicationZoneType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE		1935  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONETYPE_2		1858  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_EXPIRYTIME_2		1872  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELATITUDE_2		1886  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONELONGITUDE_2		1900  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONERADIUS_2		1914  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONETYPE_PROTECTEDZONEID_2		1928  /**/
flag V2xFac_ProtectedCommunicationZoneType_Decode(V2xFac_ProtectedCommunicationZoneType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    int nCount; 
    
    V2xFac_ProtectedCommunicationZoneType arr[16];
} V2xFac_ProtectedCommunicationZonesRSUType;

void V2xFac_ProtectedCommunicationZonesRSUType_Initialize(V2xFac_ProtectedCommunicationZonesRSUType* pVal);

#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE		2395  /**/
#define ERR_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE_ELM_2		2388  /**/
flag V2xFac_ProtectedCommunicationZonesRSUType_IsConstraintValid(const V2xFac_ProtectedCommunicationZonesRSUType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE		2396  /**/
#define ERR_UPER_ENCODE_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE_ELM_2		2389  /**/
#define V2xFac_ProtectedCommunicationZonesRSUType_REQUIRED_BYTES_FOR_ENCODING       287 
#define V2xFac_ProtectedCommunicationZonesRSUType_REQUIRED_BITS_FOR_ENCODING        2292

flag V2xFac_ProtectedCommunicationZonesRSUType_Encode(const V2xFac_ProtectedCommunicationZonesRSUType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE		2397  /**/
#define ERR_UPER_DECODE_V2XFAC_PROTECTEDCOMMUNICATIONZONESRSUTYPE_ELM_2		2390  /**/
flag V2xFac_ProtectedCommunicationZonesRSUType_Decode(V2xFac_ProtectedCommunicationZonesRSUType* pVal, BitStream* pBitStrm, int* pErrCode);


typedef V2xFac_ProtectedZoneIDType V2xFac_CenDsrcTollingZoneIDType;


void V2xFac_CenDsrcTollingZoneIDType_Initialize(V2xFac_CenDsrcTollingZoneIDType* pVal);

#define ERR_V2XFAC_CENDSRCTOLLINGZONEIDTYPE_2		2479  /**/
flag V2xFac_CenDsrcTollingZoneIDType_IsConstraintValid(const V2xFac_CenDsrcTollingZoneIDType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CENDSRCTOLLINGZONEIDTYPE_2		2480  /**/
#define V2xFac_CenDsrcTollingZoneIDType_REQUIRED_BYTES_FOR_ENCODING       4 
#define V2xFac_CenDsrcTollingZoneIDType_REQUIRED_BITS_FOR_ENCODING        27

flag V2xFac_CenDsrcTollingZoneIDType_Encode(const V2xFac_CenDsrcTollingZoneIDType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CENDSRCTOLLINGZONEIDTYPE_2		2481  /**/
flag V2xFac_CenDsrcTollingZoneIDType_Decode(V2xFac_CenDsrcTollingZoneIDType* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- V2xFac_CenDsrcTollingZoneType --------------------------------------------*/
typedef struct {
    V2xFac_LatitudeType protectedZoneLatitude;
    V2xFac_LongitudeType protectedZoneLongitude;
    V2xFac_ProtectedZoneIDType cenDsrcTollingZoneID;

    struct {
        unsigned int cenDsrcTollingZoneID:1;
    } exist;

} V2xFac_CenDsrcTollingZoneType;

void V2xFac_CenDsrcTollingZoneType_Initialize(V2xFac_CenDsrcTollingZoneType* pVal);

#define ERR_V2XFAC_CENDSRCTOLLINGZONETYPE		2451  /**/
#define ERR_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELATITUDE_2		2409  /**/
#define ERR_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELONGITUDE_2		2423  /**/
#define ERR_V2XFAC_CENDSRCTOLLINGZONETYPE_CENDSRCTOLLINGZONEID_2_2		2444  /**/
flag V2xFac_CenDsrcTollingZoneType_IsConstraintValid(const V2xFac_CenDsrcTollingZoneType* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_V2XFAC_CENDSRCTOLLINGZONETYPE		2452  /**/
#define ERR_UPER_ENCODE_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELATITUDE_2		2410  /**/
#define ERR_UPER_ENCODE_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELONGITUDE_2		2424  /**/
#define ERR_UPER_ENCODE_V2XFAC_CENDSRCTOLLINGZONETYPE_CENDSRCTOLLINGZONEID_2_2		2445  /**/
#define V2xFac_CenDsrcTollingZoneType_REQUIRED_BYTES_FOR_ENCODING       12 
#define V2xFac_CenDsrcTollingZoneType_REQUIRED_BITS_FOR_ENCODING        91

flag V2xFac_CenDsrcTollingZoneType_Encode(const V2xFac_CenDsrcTollingZoneType* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_V2XFAC_CENDSRCTOLLINGZONETYPE		2453  /**/
#define ERR_UPER_DECODE_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELATITUDE_2		2411  /**/
#define ERR_UPER_DECODE_V2XFAC_CENDSRCTOLLINGZONETYPE_PROTECTEDZONELONGITUDE_2		2425  /**/
#define ERR_UPER_DECODE_V2XFAC_CENDSRCTOLLINGZONETYPE_CENDSRCTOLLINGZONEID_2_2		2446  /**/
flag V2xFac_CenDsrcTollingZoneType_Decode(V2xFac_CenDsrcTollingZoneType* pVal, BitStream* pBitStrm, int* pErrCode);

//extern const V2xFac_LongitudeType V2xFac_LongitudeType_v2XFAC_LONGITUDE_TYPE_ONE_MICRO_DEGREE_EAST;
//extern const V2xFac_LongitudeType V2xFac_LongitudeType_v2XFAC_LONGITUDE_TYPE_ONE_MICRO_DEGREE_WEST;
//extern const V2xFac_LongitudeType V2xFac_LongitudeType_v2XFAC_LONGITUDE_TYPE_UNAVAILABLE;
//extern const V2xFac_LatitudeType V2xFac_LatitudeType_v2XFAC_LATITUDE_TYPE_ONE_MICRO_DEGREE_NORTH;
//extern const V2xFac_LatitudeType V2xFac_LatitudeType_v2XFAC_LATITUDE_TYPE_ONE_MICRO_DEGREE_SOUTH;
//extern const V2xFac_LatitudeType V2xFac_LatitudeType_v2XFAC_LATITUDE_UNAVAILABLE;
//extern const V2xFac_AltitudeValueType V2xFac_AltitudeValueType_v2XFAC_ALTITUDE_VALUE_TYPE_REFERNCE_ELLIPSOID_SURFACE;
//extern const V2xFac_AltitudeValueType V2xFac_AltitudeValueType_v2XFAC_ALTITUDE_VALUE_TYPE_ONE_CENTIMETER;
//extern const V2xFac_AltitudeValueType V2xFac_AltitudeValueType_v2XFAC_ALTITUDE_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_DeltaLongitudeType V2xFac_DeltaLongitudeType_v2XFAC_DELTA_LONGITUDE_TYPE_ONE_MICRO_DEGREE_EAST;
//extern const V2xFac_DeltaLongitudeType V2xFac_DeltaLongitudeType_v2XFAC_DELTA_LONGITUDE_TYPE_ONE_MICRO_DEGREE_WEST;
//extern const V2xFac_DeltaLongitudeType V2xFac_DeltaLongitudeType_v2XFAC_DELTA_LONGITUDE_TYPE_UNAVAILABLE;
//extern const V2xFac_DeltaLatitudeType V2xFac_DeltaLatitudeType_v2XFAC_DELTA_LATITUDE_TYPE_ONE_MICRO_DEGREE_NORTH;
//extern const V2xFac_DeltaLatitudeType V2xFac_DeltaLatitudeType_v2XFAC_DELTA_LATITUDE_TYPE_ONE_MICRO_DEGREE_SOUTH;
//extern const V2xFac_DeltaLatitudeType V2xFac_DeltaLatitudeType_v2XFAC_DELTA_LATITUDE_TYPE_UNAVAILABLE;
//extern const V2xFac_DeltaAltitudeType V2xFac_DeltaAltitudeType_v2XFAC_DELTA_ALTITUDE_TYPE_ONE_CENTIMETER_UP;
//extern const V2xFac_DeltaAltitudeType V2xFac_DeltaAltitudeType_v2XFAC_DELTA_ALTITUDE_TYPE_ONE_CENTIMETER_DOWN;
//extern const V2xFac_DeltaAltitudeType V2xFac_DeltaAltitudeType_v2XFAC_DELTA_ALTITUDE_TYPE_UNAVAILABLE;
//extern const V2xFac_PathDeltaTimeType V2xFac_PathDeltaTimeType_v2XFAC_PATH_DELTA_TIME_TYPE_TEN_MILLI_SECONDS_PAST;
//extern const V2xFac_PtActivationTypeType V2xFac_PtActivationTypeType_v2XFAC_PT_ACTIVATION_TYPE_TYPE_UNDEFINED_CODING_TYPE;
//extern const V2xFac_PtActivationTypeType V2xFac_PtActivationTypeType_v2XFAC_PT_ACTIVATION_TYPE_TYPE_R09_16_CODING_TYPE;
//extern const V2xFac_PtActivationTypeType V2xFac_PtActivationTypeType_v2XFAC_PT_ACTIVATION_TYPE_TYPE_VDV_50149_CODING_TYPE;
//extern const V2xFac_SemiAxisLengthType V2xFac_SemiAxisLengthType_v2XFAC_SEMI_AXIS_LENGTH_TYPE_ONE_CENTIMETER;
//extern const V2xFac_SemiAxisLengthType V2xFac_SemiAxisLengthType_v2XFAC_SEMI_AXIS_LENGTH_TYPE_OUT_OF_RANGE;
//extern const V2xFac_SemiAxisLengthType V2xFac_SemiAxisLengthType_v2XFAC_SEMI_AXIS_LENGTH_TYPE_UNAVAILABLE;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_RESERVED;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_TRAFFIC_CONDITION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ACCIDENT;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ROAD_WORKS;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ADVERSE_WEATHER_CONDITION_ADHESION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HAZARDOUS_LOCATION_SURFACE_CONDITION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HAZARDOUS_LOCATION_OBSTACLE_ONT_THE_ROAD;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HAZARDOUS_LOCATION_HUMAN_ON_THE_ROAD;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_WRONG_WAY_DRIVING;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ADVERSE_WEATHER_CONDITION_VISIBILITY;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_ADVERSE_WEATHER_CONDITION_PRECIPTION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_SLOW_VEHICLE;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_DANGEROUS_END_OF_QUEUE;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_VEHICLE_BREAK_DOWN;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_POST_CRASH;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HUMAN_PROBLEM;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_STATIONARY_VEHICLE;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_EMERGENCY_VEHICLE_APPROACHING;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_HAZARDOUS_LOCATION_DANGEROUS_CURVE;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_COLLISION_RISK;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_SIGNAL_VIOLATION;
//extern const V2xFac_CauseCodeTypeType V2xFac_CauseCodeTypeType_v2XFAC_CAUSE_CODE_TYPE_TYPE_DANGEROUS_SITUATION;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_INCREASED_VOLUME_OF_TRAFFIC;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_SLOWLY_INCREASING;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_INCREASING;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_STRONGLY_INCREASING;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_STATIONERY;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_SLIGHTLY_DECREASING;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_DECREASING;
//extern const V2xFac_TrafficConditionSubCauseCodeType V2xFac_TrafficConditionSubCauseCodeType_v2XFAC_TRAFFIC_CONDITION_SUB_CAUSE_CODE_TYPE_TRAFFIC_JAM_STRONGLY_DECREASING;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_MULTI_VEHICLE_ACCIDENT;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_HEAVY_ACCIDENT;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_ACCIDENT_INVOLVING_LORRY;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_ACCIDENT_INVOLVING_BUS;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_ACCIDENT_INVOLVING_HAZARDOUS_MATERIALS;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_ACCIDENT_ON_OPPOSITE_LANE;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_UNSECURED_ACCIDENT;
//extern const V2xFac_AccidentSubCauseCodeType V2xFac_AccidentSubCauseCodeType_v2XFAC_ACCIDENT_SUB_CAUSE_CODE_TYPE_ASSISTANCE_REQUESTED;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_MAJOR_ROAD_WORKS;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_ROAD_MARKING_WORK;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_SLOW_MOVING_ROAD_MAINTENANCE;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_SHORT_TERM_STATIONARY_ROADWORKS;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_STREET_CLEANING;
//extern const V2xFac_RoadworksSubCauseCodeType V2xFac_RoadworksSubCauseCodeType_v2XFAC_ROAD_WORKS_SUB_CAUSE_CODE_TYPE_WINTER_SERVICE;
//extern const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_v2XFAC_HUMAN_PRESENCE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_v2XFAC_HUMAN_PRESENCE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_CHILDREN_ON_ROADWAY;
//extern const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_v2XFAC_HUMAN_PRESENCE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_CYCLIST_ON_ROADWAY;
//extern const V2xFac_HumanPresenceOnTheRoadSubCauseCodeType V2xFac_HumanPresenceOnTheRoadSubCauseCodeType_v2XFAC_HUMAN_PRESENCE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_MOTORCYCLIST_ON_ROADWAY;
//extern const V2xFac_WrongWayDrivingSubCauseCodeType V2xFac_WrongWayDrivingSubCauseCodeType_v2XFAC_WRONGWAY_DRIVING_SUB_CAUSECODE_TYPE_UNAVAILABLE;
//extern const V2xFac_WrongWayDrivingSubCauseCodeType V2xFac_WrongWayDrivingSubCauseCodeType_v2XFAC_WRONGWAY_DRIVING_SUB_CAUSECODE_TYPE_WRONG_LANE;
//extern const V2xFac_WrongWayDrivingSubCauseCodeType V2xFac_WrongWayDrivingSubCauseCodeType_v2XFAC_WRONGWAY_DRIVING_SUB_CAUSECODE_TYPE_WRONG_DIRECTION;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_STRONG_WINDS;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_DAMAGING_HAIL;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_HURRICANE;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_THUNDER_STORM;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_TORNADO;
//extern const V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType V2xFac_AdverseWeatherCondition_ExtremeWeatherConditionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_EXTREME_WEATHER_CONDITION_SUB_CAUSE_CODE_TYPE_BLIZZARD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_HEAVY_FROST_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_FUEL_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_MUD_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_SNOW_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_ICE_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_BLACK_ICE_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_OIL_ON_ROAD;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_LOOSE_CHIPPINGS;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_INSTANT_BLACK_ICE;
//extern const V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType V2xFac_AdverseWeatherCondition_AdhesionSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_ADHESION_SUB_CAUSE_CODE_TYPE_ROADS_SALTED;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_FOG;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_SMOKE;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_HEAVY_SNOW_FALL;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_HEAVY_RAIN;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_HEAVY_HAIL;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_LOW_SUN_GLARE;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_SAND_STORMS;
//extern const V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType V2xFac_AdverseWeatherCondition_VisibilitySubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_VISIBILITY_SUB_CAUSE_CODE_TYPE_SWARMS_OF_INSECTS;
//extern const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_PRECIPITATION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_PRECIPITATION_SUB_CAUSE_CODE_TYPE_HEAVY_RAIN;
//extern const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_PRECIPITATION_SUB_CAUSE_CODE_TYPE_HEAVY_SNOW_FALL;
//extern const V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType V2xFac_AdverseWeatherCondition_PrecipitationSubCauseCodeType_v2XFAC_ADVERSE_WEATHER_CONDITION_PRECIPITATION_SUB_CAUSE_CODE_TYPE_SOFT_HAIL;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_MAINTENANCE_VEHICLE;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_VEHICLES_SLOWING_TO_LOOK_AT_ACCIDENT;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_ABNORMAL_LOAD;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_ABNORMAL_WIDE_LOAD;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_CONVOY;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_SNOW_PLOUGH;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_DEICING;
//extern const V2xFac_SlowVehicleSubCauseCodeType V2xFac_SlowVehicleSubCauseCodeType_v2XFAC_SLOW_VEHICLE_SUB_CAUSE_CODE_TYPE_SALTING_VEHICLES;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_HUMAN_PROBLEM;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_VEHICLE_BREAKDOWN;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_POST_CRASH;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_PUBLIC_TRANSPORT_STOP;
//extern const V2xFac_StationaryVehicleSubCauseCodeType V2xFac_StationaryVehicleSubCauseCodeType_v2XFAC_STATIONARY_VEHICLE_SUB_CAUSE_CODE_TYPE_CARRYING_DANGEROUS_GOODS;
//extern const V2xFac_HumanProblemSubCauseCodeType V2xFac_HumanProblemSubCauseCodeType_v2XFAC_HUMAN_PROBLEM_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HumanProblemSubCauseCodeType V2xFac_HumanProblemSubCauseCodeType_v2XFAC_HUMAN_PROBLEM_SUB_CAUSE_CODE_TYPE_GLYCEMIA_PROBLEM;
//extern const V2xFac_HumanProblemSubCauseCodeType V2xFac_HumanProblemSubCauseCodeType_v2XFAC_HUMAN_PROBLEM_SUB_CAUSE_CODE_TYPE_HEART_PROBLEM;
//extern const V2xFac_EmergencyVehicleApproachingSubCauseCodeType V2xFac_EmergencyVehicleApproachingSubCauseCodeType_v2XFAC_EMERGENCY_VEHICLE_APPROACHING_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_EmergencyVehicleApproachingSubCauseCodeType V2xFac_EmergencyVehicleApproachingSubCauseCodeType_v2XFAC_EMERGENCY_VEHICLE_APPROACHING_SUB_CAUSE_CODE_TYPE_EMERGENCY_VEHICLE_APPROACHING;
//extern const V2xFac_EmergencyVehicleApproachingSubCauseCodeType V2xFac_EmergencyVehicleApproachingSubCauseCodeType_v2XFAC_EMERGENCY_VEHICLE_APPROACHING_SUB_CAUSE_CODE_TYPE_PRIORITIZED_VEHICLE_APPROACHING;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_DANGEROUS_LEFT_TURN_CURVE;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_DANGEROUS_RIGHT_TURN_CURVE;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_MULTIPLE_CURVES_STARTING_WITH_UNKNOWN_TURNING_DIRECTION;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_MULTIPLE_CURVES_STARTING_WITH_LEFT_TURN;
//extern const V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType V2xFac_HazardousLocation_DangerousCurveSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_DANGEROUS_CURVE_SUB_CAUSE_CODE_TYPE_MULTIPLE_CURVES_STARTING_WITH_RIGHT_TURN;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_ROCKFALLS;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_EARTHQUAKE_DAMAGE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_SEWER_COLLAPSE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_SUBSIDENCE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_SNOW_DRIFTS;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_STORM_DAMAGE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_BURST_PIPE;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_VOLCANO_ERUPTION;
//extern const V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType V2xFac_HazardousLocation_SurfaceConditionSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_SURFACE_CONDITION_SUB_CAUSE_CODE_TYPE_FALLING_ICE;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_SHED_LOAD;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_PARTS_OF_VEHICLES;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_PARTS_OF_TYRES;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_BIG_OBJECTS;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_FALLEN_TREES;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_HUB_CAPS;
//extern const V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_ObstacleOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_OBSTACLE_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_WAITING_VEHICLES;
//extern const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_WILD_ANIMALS;
//extern const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_HERD_OF_ANIMALS;
//extern const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_SMALL_ANIMALS;
//extern const V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType V2xFac_HazardousLocation_AnimalOnTheRoadSubCauseCodeType_v2XFAC_HAZARDOUS_LOCATION_ANIMAL_ON_THE_ROAD_SUB_CAUSE_CODE_TYPE_LARGE_ANIMALS;
//extern const V2xFac_CollisionRiskSubCauseCodeType V2xFac_CollisionRiskSubCauseCodeType_v2XFAC_COLLISION_RISK_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_CollisionRiskSubCauseCodeType V2xFac_CollisionRiskSubCauseCodeType_v2XFAC_COLLISION_RISK_SUB_CAUSE_CODE_TYPE_LONGITUDINAL_COLLISION_RISK;
//extern const V2xFac_CollisionRiskSubCauseCodeType V2xFac_CollisionRiskSubCauseCodeType_v2XFAC_COLLISION_RISK_SUB_CAUSE_CODE_TYPE_CROSSING_COLLISION_RISK;
//extern const V2xFac_CollisionRiskSubCauseCodeType V2xFac_CollisionRiskSubCauseCodeType_v2XFAC_COLLISION_RISK_SUB_CAUSE_CODE_TYPE_LATERAL_COLLISION_RISK;
//extern const V2xFac_CollisionRiskSubCauseCodeType V2xFac_CollisionRiskSubCauseCodeType_v2XFAC_COLLISION_RISK_SUB_CAUSE_CODE_TYPE_VULNERABLE_ROAD_USER;
//extern const V2xFac_SignalViolationSubCauseCodeType V2xFac_SignalViolationSubCauseCodeType_v2XFAC_SIGNAL_VIOLATION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_SignalViolationSubCauseCodeType V2xFac_SignalViolationSubCauseCodeType_v2XFAC_SIGNAL_VIOLATION_SUB_CAUSE_CODE_TYPE_STOP_SIGN_VIOLATION;
//extern const V2xFac_SignalViolationSubCauseCodeType V2xFac_SignalViolationSubCauseCodeType_v2XFAC_SIGNAL_VIOLATION_SUB_CAUSE_CODE_TYPE_TRAFFIC_LIGHT_VIOLATION;
//extern const V2xFac_SignalViolationSubCauseCodeType V2xFac_SignalViolationSubCauseCodeType_v2XFAC_SIGNAL_VIOLATION_SUB_CAUSE_CODE_TYPE_TURNING_REGULATION_VIOLATION;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_EMERGENCY_VEHICLES;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_RESCUE_HELICOPTER_LANDING;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_POLICE_ACTIVITY_ONGOING;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_MEDICAL_EMERGENCY_ONGOING;
//extern const V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType V2xFac_RescueAndRecoveryWorkInProgressSubCauseCodeType_v2XFAC_RESCUE_AND_RECOVERY_WORK_IN_PROGRESS_SUB_CAUSE_CODE_TYPE_CHILD_ABDUCTION_IN_PROGRESS;
//extern const V2xFac_DangerousEndOfQueueSubCauseCodeType V2xFac_DangerousEndOfQueueSubCauseCodeType_v2XFAC_DANGEROUS_END_OF_QUEUE_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_DangerousEndOfQueueSubCauseCodeType V2xFac_DangerousEndOfQueueSubCauseCodeType_v2XFAC_DANGEROUS_END_OF_QUEUE_SUB_CAUSE_CODE_TYPE_SUDDEN_END_OF_QUEUE;
//extern const V2xFac_DangerousEndOfQueueSubCauseCodeType V2xFac_DangerousEndOfQueueSubCauseCodeType_v2XFAC_DANGEROUS_END_OF_QUEUE_SUB_CAUSE_CODE_TYPE_QUEUE_OVER_HILL;
//extern const V2xFac_DangerousEndOfQueueSubCauseCodeType V2xFac_DangerousEndOfQueueSubCauseCodeType_v2XFAC_DANGEROUS_END_OF_QUEUE_SUB_CAUSE_CODE_TYPE_QUEUE_AROUND_BEND;
//extern const V2xFac_DangerousEndOfQueueSubCauseCodeType V2xFac_DangerousEndOfQueueSubCauseCodeType_v2XFAC_DANGEROUS_END_OF_QUEUE_SUB_CAUSE_CODE_TYPE_QUEUE_IN_TUNNEL;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_EMERGENCY_ELECTRONIC_BRAKE_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_PRE_CRASH_SYSTEM_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_ESP_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_ABS_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_AEB_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_BRAKE_WARNING_ENGAGED;
//extern const V2xFac_DangerousSituationSubCauseCodeType V2xFac_DangerousSituationSubCauseCodeType_v2XFAC_DANGEROUS_SITUATION_SUB_CAUSE_CODE_TYPE_COLLISION_RISK_WARNING_ENGAGED;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_LACK_OF_FUEL;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_LACK_OF_BATTERY_POWER;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_ENGINE_PROBLEM;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_TRANSMISSION_PROBLEM;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_ENGINE_COOLING_PROBLEM;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_BRAKING_SYSTEM_PROBLEM;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_STEERING_PROBLEM;
//extern const V2xFac_VehicleBreakdownSubCauseCodeType V2xFac_VehicleBreakdownSubCauseCodeType_v2XFAC_VEHICLE_BREAK_DOWN_SUB_CAUSE_CODE_TYPE_TYRE_PUNCTURE;
//extern const V2xFac_PostCrashSubCauseCodeType V2xFac_PostCrashSubCauseCodeType_v2XFAC_POST_CRASH_SUB_CAUSE_CODE_TYPE_UNAVAILABLE;
//extern const V2xFac_PostCrashSubCauseCodeType V2xFac_PostCrashSubCauseCodeType_v2XFAC_POST_CRASH_SUB_CAUSE_CODE_TYPE_ACCIDENT_WITHOUT_E_CALL_TRIGGERED;
//extern const V2xFac_PostCrashSubCauseCodeType V2xFac_PostCrashSubCauseCodeType_v2XFAC_POST_CRASH_SUB_CAUSE_CODE_TYPE_ACCIDENT_WITH_E_CALL_MANUALLY_TRIGGERED;
//extern const V2xFac_PostCrashSubCauseCodeType V2xFac_PostCrashSubCauseCodeType_v2XFAC_POST_CRASH_SUB_CAUSE_CODE_TYPE_ACCIDENT_WITH_E_CALL_AUTOMATICALLY_TRIGGERED;
//extern const V2xFac_PostCrashSubCauseCodeType V2xFac_PostCrashSubCauseCodeType_v2XFAC_POST_CRASH_SUB_CAUSE_CODE_TYPE_ACCIDENT_WITH_E_CALL_TRIGGER_ED_WITHOUT_ACCESS_TO_CELLULAR_NETWORK;
//extern const V2xFac_CurvatureValueType V2xFac_CurvatureValueType_v2XFAC_CURVATURE_VALUE_TYPE_STRAIGHT;
//extern const V2xFac_CurvatureValueType V2xFac_CurvatureValueType_v2XFAC_CURVATURE_VALUE_TYPE_RECIPROCAL_OF_1_METER_RADIUS_TO_RIGHT;
//extern const V2xFac_CurvatureValueType V2xFac_CurvatureValueType_v2XFAC_CURVATURE_VALUE_TYPE_RECIPROCAL_OF_1_METER_RADIUS_TO_LEFT;
//extern const V2xFac_CurvatureValueType V2xFac_CurvatureValueType_v2XFAC_CURVATURE_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_HeadingValueType V2xFac_HeadingValueType_v2XFAC_HEADING_VALUE_TYPE_WGS_84_NORTH;
//extern const V2xFac_HeadingValueType V2xFac_HeadingValueType_v2XFAC_HEADING_VALUE_TYPE_WGS_84_EAST;
//extern const V2xFac_HeadingValueType V2xFac_HeadingValueType_v2XFAC_HEADING_VALUE_TYPE_WGS_84_SOUTH;
//extern const V2xFac_HeadingValueType V2xFac_HeadingValueType_v2XFAC_HEADING_VALUE_TYPE_WGS_84_WEST;
//extern const V2xFac_HeadingValueType V2xFac_HeadingValueType_v2XFAC_HEADING_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_HeadingConfidenceType V2xFac_HeadingConfidenceType_v2XFAC_HEADING_CONFIDENCE_TYPE_EQUAL_OR_WITHIN_ZERO_POINT_ONE_DEGREE;
//extern const V2xFac_HeadingConfidenceType V2xFac_HeadingConfidenceType_v2XFAC_HEADING_CONFIDENCE_TYPE_EQUAL_OR_WITHIN_ONE_DEGREE;
//extern const V2xFac_HeadingConfidenceType V2xFac_HeadingConfidenceType_v2XFAC_HEADING_CONFIDENCE_TYPE_OUT_OF_RANGE;
//extern const V2xFac_HeadingConfidenceType V2xFac_HeadingConfidenceType_v2XFAC_HEADING_CONFIDENCE_TYPE_UNAVAILABLE;
//extern const V2xFac_LanePositionType V2xFac_LanePositionType_v2XFAC_LANE_POSITION_TYPE_OFF_THE_ROAD;
//extern const V2xFac_LanePositionType V2xFac_LanePositionType_v2XFAC_LANE_POSITION_TYPE_HARD_SHOULDER;
//extern const V2xFac_LanePositionType V2xFac_LanePositionType_v2XFAC_LANE_POSITION_TYPE_OUTER_MOST_DRIVING_LANE;
//extern const V2xFac_LanePositionType V2xFac_LanePositionType_v2XFAC_LANE_POSITION_TYPE_SECOND_LANE_FROM_OUTSIDE;
//extern const V2xFac_PerformanceClassType V2xFac_PerformanceClassType_v2XFAC_PERFORMANCE_CLASS_TYPE_UNAVAILABLE;
//extern const V2xFac_PerformanceClassType V2xFac_PerformanceClassType_v2XFAC_PERFORMANCE_CLASS_TYPE_PERFORMANCE_CLASS_A;
//extern const V2xFac_PerformanceClassType V2xFac_PerformanceClassType_v2XFAC_PERFORMANCE_CLASS_TYPE_PERFORMANCE_CLASS_B;
//extern const V2xFac_SpeedValueType V2xFac_SpeedValueType_v2XFAC_SPEED_VALUE_TYPE_STANDSTILL;
//extern const V2xFac_SpeedValueType V2xFac_SpeedValueType_v2XFAC_SPEED_VALUE_TYPE_ONE_CENTIMETER_PER_SEC;
//extern const V2xFac_SpeedValueType V2xFac_SpeedValueType_v2XFAC_SPEED_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_SpeedConfidenceType V2xFac_SpeedConfidenceType_v2XFAC_SPEED_CONFIDENCE_TYPE_EQUAL_OR_WITHIN_ONE_CENTIMETER_PER_SEC;
//extern const V2xFac_SpeedConfidenceType V2xFac_SpeedConfidenceType_v2XFAC_SPEED_CONFIDENCE_TYPE_EQUAL_OR_WITHIN_ONE_METER_PER_SEC;
//extern const V2xFac_SpeedConfidenceType V2xFac_SpeedConfidenceType_v2XFAC_SPEED_CONFIDENCE_TYPE_OUT_OF_RANGE;
//extern const V2xFac_SpeedConfidenceType V2xFac_SpeedConfidenceType_v2XFAC_SPEED_CONFIDENCE_TYPE_UNAVAILABLE;
//extern const V2xFac_VehicleMassType V2xFac_VehicleMassType_v2XFAC_VEHICLE_MASS_TYPE_HUNDRED_KG;
//extern const V2xFac_VehicleMassType V2xFac_VehicleMassType_v2XFAC_VEHICLE_MASS_TYPE_UNAVAILABLE;
//extern const V2xFac_LongitudinalAccelerationValueType V2xFac_LongitudinalAccelerationValueType_v2XFAC_LONGITUDINAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_FORWARD;
//extern const V2xFac_LongitudinalAccelerationValueType V2xFac_LongitudinalAccelerationValueType_v2XFAC_LONGITUDINAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_BACKWARD;
//extern const V2xFac_LongitudinalAccelerationValueType V2xFac_LongitudinalAccelerationValueType_v2XFAC_LONGITUDINAL_ACCELERATION_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_AccelerationConfidenceType V2xFac_AccelerationConfidenceType_v2XFAC_ACCELERATION_CONFIDENCE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED;
//extern const V2xFac_AccelerationConfidenceType V2xFac_AccelerationConfidenceType_v2XFAC_ACCELERATION_CONFIDENCE_TYPE_OUT_OF_RANGE;
//extern const V2xFac_AccelerationConfidenceType V2xFac_AccelerationConfidenceType_v2XFAC_ACCELERATION_CONFIDENCE_TYPE_UNAVAILABLE;
//extern const V2xFac_LateralAccelerationValueType V2xFac_LateralAccelerationValueType_v2XFAC_LATERAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_TO_RIGHT;
//extern const V2xFac_LateralAccelerationValueType V2xFac_LateralAccelerationValueType_v2XFAC_LATERAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_TO_LEFT;
//extern const V2xFac_LateralAccelerationValueType V2xFac_LateralAccelerationValueType_v2XFAC_LATERAL_ACCELERATION_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_VerticalAccelerationValueType V2xFac_VerticalAccelerationValueType_v2XFAC_VERTICAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_UP;
//extern const V2xFac_VerticalAccelerationValueType V2xFac_VerticalAccelerationValueType_v2XFAC_VERTICAL_ACCELERATION_VALUE_TYPE_POINT_ONE_METER_PER_SEC_SQUARED_DOWN;
//extern const V2xFac_VerticalAccelerationValueType V2xFac_VerticalAccelerationValueType_v2XFAC_VERTICAL_ACCELERATION_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_UNKNOWN;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_PEDESTRIAN;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_CYCLIST;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_MOPED;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_MOTORCYCLE;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_PASSENGERCAR;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_BUS;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_LIGHTTRUCK;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_HEAVYTRUCK;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_TRAILER;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_SPECIALVEHICLES;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_TRAM;
//extern const V2xFac_StationTypeType V2xFac_StationTypeType_v2XFAC_ST_ROADSIDEUNIT;
//extern const V2xFac_HeightLonCarrType V2xFac_HeightLonCarrType_v2XFAC_HEIGHT_LON_CAR_R_TYPE_ONE_CENTIMETER;
//extern const V2xFac_HeightLonCarrType V2xFac_HeightLonCarrType_v2XFAC_HEIGHT_LON_CAR_R_TYPE_UNAVAILABLE;
//extern const V2xFac_PosLonCarrType V2xFac_PosLonCarrType_v2XFAC_POS_LON_CAR_R_TYPE_ONE_CENTIMETER;
//extern const V2xFac_PosLonCarrType V2xFac_PosLonCarrType_v2XFAC_POS_LON_CAR_R_TYPE_UNAVAILABLE;
//extern const V2xFac_PosPillarType V2xFac_PosPillarType_v2XFAC_POS_PILLAR_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_PosPillarType V2xFac_PosPillarType_v2XFAC_POS_PILLAR_TYPE_UNAVAILABLE;
//extern const V2xFac_PosCentMassType V2xFac_PosCentMassType_v2XFAC_POS_CENT_MASS_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_PosCentMassType V2xFac_PosCentMassType_v2XFAC_POS_CENT_MASS_TYPE_UNAVAILABLE;
//extern const V2xFac_SpeedLimitType V2xFac_SpeedLimitType_v2XFAC_SPEED_LIMIT_TYPE_ONE_KM_PER_HOUR;
//extern const V2xFac_TemperatureType V2xFac_TemperatureType_v2XFAC_TEMPERATURE_TYPE_EQUAL_OR_SMALLER_THAN_MINUS_60DEG;
//extern const V2xFac_TemperatureType V2xFac_TemperatureType_v2XFAC_TEMPERATURE_TYPE_ONE_DEGREE_CELSIUS;
//extern const V2xFac_TemperatureType V2xFac_TemperatureType_v2XFAC_TEMPERATURE_TYPE_EQUAL_OR_GREATER_THAN_67DEG;
//extern const V2xFac_WheelBaseVehicleType V2xFac_WheelBaseVehicleType_v2XFAC_WHEEL_BASE_VEHICLE_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_WheelBaseVehicleType V2xFac_WheelBaseVehicleType_v2XFAC_WHEEL_BASE_VEHICLE_TYPE_UNAVAILABLE;
//extern const V2xFac_TurningRadiusType V2xFac_TurningRadiusType_v2XFAC_TURNING_RADIUS_TYPE_POINT_4_METERS;
//extern const V2xFac_TurningRadiusType V2xFac_TurningRadiusType_v2XFAC_TURNING_RADIUS_TYPE_UNAVAILABLE;
//extern const V2xFac_PosFrontAxType V2xFac_PosFrontAxType_v2XFAC_POS_FRONT_AX_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_PosFrontAxType V2xFac_PosFrontAxType_v2XFAC_POS_FRONT_AX_TYPE_UNAVAILABLE;
//extern const V2xFac_VehicleLengthValueType V2xFac_VehicleLengthValueType_v2XFAC_VEHICLE_LENGTH_VALUE_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_VehicleLengthValueType V2xFac_VehicleLengthValueType_v2XFAC_VEHICLE_LENGTH_VALUE_TYPE_OUT_OF_RANGE;
//extern const V2xFac_VehicleLengthValueType V2xFac_VehicleLengthValueType_v2XFAC_VEHICLE_LENGTH_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_VehicleWidthType V2xFac_VehicleWidthType_v2XFAC_VEHICLE_WIDTH_TYPE_TEN_CENTIMETERS;
//extern const V2xFac_VehicleWidthType V2xFac_VehicleWidthType_v2XFAC_VEHICLE_WIDTH_TYPE_OUT_OF_RANGE;
//extern const V2xFac_VehicleWidthType V2xFac_VehicleWidthType_v2XFAC_VEHICLE_WIDTH_TYPE_UNAVAILABLE;
//extern const V2xFac_InformationQualityType V2xFac_InformationQualityType_v2XFAC_INFORMATION_QUALITY_TYPE_UNAVAILABLE;
//extern const V2xFac_InformationQualityType V2xFac_InformationQualityType_v2XFAC_INFORMATION_QUALITY_TYPE_LOWEST;
//extern const V2xFac_InformationQualityType V2xFac_InformationQualityType_v2XFAC_INFORMATION_QUALITY_TYPE_HIGHEST;
//extern const V2xFac_SteeringWheelAngleValueType V2xFac_SteeringWheelAngleValueType_v2XFAC_STEERING_WHEEL_ANGLE_VALUE_TYPE_STRAIGHT;
//extern const V2xFac_SteeringWheelAngleValueType V2xFac_SteeringWheelAngleValueType_v2XFAC_STEERING_WHEEL_ANGLE_VALUE_TYPE_ONE_POINT_FIVE_DEGREES_TO_RIGHT;
//extern const V2xFac_SteeringWheelAngleValueType V2xFac_SteeringWheelAngleValueType_v2XFAC_STEERING_WHEEL_ANGLE_VALUE_TYPE_ONE_POINT_FIVE_DEGREES_TO_LEFT;
//extern const V2xFac_SteeringWheelAngleValueType V2xFac_SteeringWheelAngleValueType_v2XFAC_STEERING_WHEEL_ANGLE_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_SteeringWheelAngleConfidenceType V2xFac_SteeringWheelAngleConfidenceType_v2XFAC_STEERING_WHEEL_ANGLE_CONFIDENCE_TYPE_EQUAL_OR_WITH_IN_ONE_POINT_FIVE_DEGREE;
//extern const V2xFac_SteeringWheelAngleConfidenceType V2xFac_SteeringWheelAngleConfidenceType_v2XFAC_STEERING_WHEEL_ANGLE_CONFIDENCE_TYPE_OUT_OF_RANGE;
//extern const V2xFac_SteeringWheelAngleConfidenceType V2xFac_SteeringWheelAngleConfidenceType_v2XFAC_STEERING_WHEEL_ANGLE_CONFIDENCE_TYPE_UNAVAILABLE;
//extern const V2xFac_TimestampItsType V2xFac_TimestampItsType_v2XFAC_TIME_STAMP_ITS_TYPE_UTC_START_OF_2004;
//extern const V2xFac_TimestampItsType V2xFac_TimestampItsType_v2XFAC_TIME_STAMP_ITS_TYPE_ONE_MILLI_SEC_AFTER_UTC_START_OF_2004;
//extern const V2xFac_YawRateValueType V2xFac_YawRateValueType_v2XFAC_YAWRATE_VALUE_TYPE_STRAIGHT;
//extern const V2xFac_YawRateValueType V2xFac_YawRateValueType_v2XFAC_YAWRATE_VALUE_TYPE_DEGSEC_000_01_TO_RIGHT;
//extern const V2xFac_YawRateValueType V2xFac_YawRateValueType_v2XFAC_YAWRATE_VALUE_TYPE_DEGSEC_000_01_TO_LEFT;
//extern const V2xFac_YawRateValueType V2xFac_YawRateValueType_v2XFAC_YAWRATE_VALUE_TYPE_UNAVAILABLE;
//extern const V2xFac_TransmissionIntervalType V2xFac_TransmissionIntervalType_v2XFAC_TRANSMISSION_INTERVAL_TYPE_one_Milli_Second;
//extern const V2xFac_TransmissionIntervalType V2xFac_TransmissionIntervalType_v2XFAC_TRANSMISSION_INTERVAL_TYPE_ten_Seconds;
//extern const V2xFac_ValidityDurationType V2xFac_ValidityDurationType_v2XFAC_VALIDITY_DURATION_TYPE_TIME_OF_DETECTION;
//extern const V2xFac_ValidityDurationType V2xFac_ValidityDurationType_v2XFAC_VALIDITY_DURATION_TYPE_ONE_SECOND_AFTER_DETECTION;
//extern const V2xFac_NumberOfOccupantsType V2xFac_NumberOfOccupantsType_v2XFAC_NUMBER_OF_OCCUPANTS_TYPE_ONE_OCCUPANT;
//extern const V2xFac_NumberOfOccupantsType V2xFac_NumberOfOccupantsType_v2XFAC_NUMBER_OF_OCCUPANTS_TYPE_UNAVAILABLE;
//extern const V2xFac_ProtectedZoneRadiusType V2xFac_ProtectedZoneRadiusType_v2XFAC_PROTECTED_ZONE_RADIUS_TYPE_ONE_METER;

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
